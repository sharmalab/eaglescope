{"mappings":"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","sources":["<anon>","source/components/VisualTools/Chart/KMCurve.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"3qdiD\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $27de1dd5e4f9ba3a$export$2e2bcd8739ae039);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n\nvar $c9Z8w = parcelRequire(\"c9Z8w\");\nfunction $27de1dd5e4f9ba3a$var$isUndefined(d) {\n    return d === undefined || d == null || typeof d === 'string' && d.toLowerCase() === 'na';\n}\nclass $27de1dd5e4f9ba3a$export$2e2bcd8739ae039 extends (0, $acw62.PureComponent) {\n    constructor(props){\n        super(props);\n        this.self = /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).createRef();\n        this.maxTime = Number.NEGATIVE_INFINITY;\n        this.state = {\n            margin: {\n                top: 35,\n                right: 20,\n                bottom: 45,\n                left: 45\n            }\n        };\n        if (this.props.filter) this.state.data = this.transform(this.props.data.filter((d)=>d[this.props.filter.field] === this.props.filter.value), this.props.fields);\n        else this.state.data = this.transform(this.props.data, this.props.fields);\n    }\n    componentDidMount() {\n        setTimeout(()=>{\n            const rect = this.self.current.getBoundingClientRect();\n            const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n            const innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n            // create svg\n            const svg = $9NlP8.select(this.self.current).append('svg').attr('width', rect.width).attr('height', rect.height);\n            // create viewer\n            const viewer = svg.append('g').attr('transform', `translate(${this.state.margin.left},${this.state.margin.top})`);\n            //\n            this.xScale = $9NlP8.scaleLinear().domain([\n                0,\n                this.maxTime\n            ]).range([\n                0,\n                innerWidth\n            ]);\n            this.yScale = $9NlP8.scaleLinear().domain([\n                0,\n                1\n            ]).range([\n                innerHeight,\n                0\n            ]);\n            this.color = $9NlP8.scaleOrdinal().domain(this.state.data.map((d)=>d.key)).range($9NlP8.quantize((t)=>$9NlP8.interpolateSpectral(t), this.state.data.length));\n            const xaxisGroup = viewer.append('g').attr('transform', `translate(0,${innerHeight})`).call($9NlP8.axisBottom(this.xScale).ticks(4)); // .tickSize(-innerWidth));\n            xaxisGroup.append('text').attr('y', 30).attr('x', innerWidth / 2).attr('fill', 'black').attr('font-size', 13).text(`Time ${this.props.fields.time.unit ? `(${this.props.fields.time.unit})` : ''}`);\n            // add the y Axis\n            const yaxisGroup = viewer.append('g').call($9NlP8.axisLeft(this.yScale).ticks(4)); // .tickSize(-innerWidth)\n            yaxisGroup.append('text').attr('y', -30).attr('x', -innerHeight / 3).attr('fill', 'black').attr('font-size', 13).attr('transform', 'rotate(-90)').text('Survival Probability');\n            this.state.data.forEach((d)=>this.drawKMCurve(viewer, d));\n            const height = 0;\n            const nodeWidth = (d)=>d.getBBox().width;\n            const legend = svg.append('g').attr('class', 'legend').attr('transform', `translate(${this.state.margin.left + innerWidth / 2},0)`);\n            const lg = legend.selectAll('g').data(this.state.data).enter().append('g').attr('transform', (d, i)=>`translate(${i * 100},${height + 15})`);\n            lg.append('rect').style('fill', (d)=>this.color(d.key)).attr('x', 0).attr('y', 0).attr('width', 10).attr('height', 10);\n            lg.append('text').style('font-family', 'Georgia').style('font-size', '13px').attr('x', 17.5).attr('y', 10).text((d)=>d.key);\n            let offset = 0;\n            lg.attr('transform', function transform() {\n                const x = offset;\n                offset += nodeWidth(this) + 10;\n                return `translate(${x},${height + 10})`;\n            });\n        }, 500);\n    }\n    transform(data, field) {\n        const { eventValue: eventValue } = field;\n        const { censoredValue: censoredValue } = field;\n        const group = field.group.field;\n        const time = field.time.field;\n        const event = field.event.field;\n        const filteredData = data.filter((d)=>d.collapsed_stage !== 'stage_x/NR' && !$27de1dd5e4f9ba3a$var$isUndefined(d[time]) && !$27de1dd5e4f9ba3a$var$isUndefined(d[event]) && !$27de1dd5e4f9ba3a$var$isUndefined(d[group]));\n        this.maxTime = Math.max(...filteredData.map((d)=>d[time]));\n        const groups = $9NlP8.nest().key((d)=>d[group]).entries(filteredData);\n        const rs = [];\n        groups.forEach((g)=>{\n            const { key: key } = g;\n            let risk = g.values.length;\n            const values = $9NlP8.nest().key((d)=>+d[time]).sortKeys((a, b)=>+a - +b).rollup((v)=>({\n                    event: v.filter((d)=>d[event] === eventValue).length,\n                    censor: v.filter((d)=>d[event] === censoredValue).length\n                })).entries(g.values);\n            let p = 1;\n            const points = [];\n            values.forEach((d)=>{\n                const currentTime = +d.key;\n                const e = d.value.event;\n                const c = d.value.censor;\n                if (currentTime < 0) return;\n                if (e > 0) {\n                    p *= 1 - e / risk;\n                    const censored = false;\n                    points.push({\n                        p: p,\n                        currentTime: currentTime,\n                        censored: censored\n                    });\n                }\n                if (c > 0) {\n                    const censored = true;\n                    points.push({\n                        p: p,\n                        currentTime: currentTime,\n                        censored: censored\n                    });\n                }\n                risk -= e + c;\n            });\n            rs.push({\n                key: key,\n                points: points\n            });\n        });\n        return rs;\n    }\n    drawLine(viewer, points, color) {\n        const line = $9NlP8.line().curve($9NlP8.curveStepAfter).x((d)=>this.xScale(d.time)).y((d)=>this.yScale(d.p));\n        viewer.append('path').datum(points).attr('class', 'line').style('stroke', color).attr('d', line);\n        points.forEach((point)=>{\n            if (point.censored) {\n                const p = [\n                    {\n                        p: point.p - 0.015,\n                        time: point.time\n                    },\n                    {\n                        p: point.p + 0.015,\n                        time: point.time\n                    }\n                ];\n                viewer.append('path').datum(p).attr('class', 'mark').style('stroke', color).attr('d', line);\n            }\n        });\n    }\n    drawKMCurve(viewer, d) {\n        // draw lines\n        this.drawLine(viewer, d.points, this.color(d.key));\n    // draw marks\n    }\n    render() {\n        return /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n            id: this.props.id,\n            ref: this.self,\n            role: \"figure\",\n            style: {\n                width: '100%',\n                height: '100%'\n            }\n        });\n    }\n}\n$27de1dd5e4f9ba3a$export$2e2bcd8739ae039.propTypes = {\n    data: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    fields: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        x: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n        time: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape()\n    }).isRequired,\n    filter: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        field: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string,\n        value: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string\n    }),\n    id: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired\n};\n$27de1dd5e4f9ba3a$export$2e2bcd8739ae039.defaultProps = {\n    filter: {}\n};\n\n});\n\n\n//# sourceMappingURL=KMCurve.4c1198e3.js.map\n","import React, { PureComponent } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\n\nfunction isUndefined(d) {\n  return d === undefined || d == null || (typeof d === 'string' && d.toLowerCase() === 'na');\n}\nexport default class KMCurve extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.self = React.createRef();\n    this.maxTime = Number.NEGATIVE_INFINITY;\n    this.state = {\n      margin: {\n        top: 35,\n        right: 20,\n        bottom: 45,\n        left: 45,\n      },\n    };\n    if (this.props.filter) {\n      this.state.data = this.transform(\n        this.props.data.filter((d) => d[this.props.filter.field] === this.props.filter.value),\n        this.props.fields,\n      );\n    } else {\n      this.state.data = this.transform(this.props.data, this.props.fields);\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      const rect = this.self.current.getBoundingClientRect();\n      const innerWidth = rect.width - this.state.margin.left - this.state.margin.right;\n      const innerHeight = rect.height - this.state.margin.top - this.state.margin.bottom;\n      // create svg\n      const svg = d3\n        .select(this.self.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height);\n      // create viewer\n      const viewer = svg\n        .append('g')\n        .attr('transform', `translate(${this.state.margin.left},${this.state.margin.top})`);\n      //\n      this.xScale = d3.scaleLinear().domain([0, this.maxTime]).range([0, innerWidth]);\n\n      this.yScale = d3.scaleLinear().domain([0, 1]).range([innerHeight, 0]);\n\n      this.color = d3\n        .scaleOrdinal()\n        .domain(this.state.data.map((d) => d.key))\n        .range(d3.quantize((t) => d3.interpolateSpectral(t), this.state.data.length));\n\n      const xaxisGroup = viewer\n        .append('g')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(d3.axisBottom(this.xScale).ticks(4)); // .tickSize(-innerWidth));\n      xaxisGroup\n        .append('text')\n        .attr('y', 30)\n        .attr('x', innerWidth / 2)\n        .attr('fill', 'black')\n        .attr('font-size', 13)\n        .text(`Time ${this.props.fields.time.unit ? `(${this.props.fields.time.unit})` : ''}`);\n\n      // add the y Axis\n      const yaxisGroup = viewer.append('g').call(d3.axisLeft(this.yScale).ticks(4)); // .tickSize(-innerWidth)\n      yaxisGroup\n        .append('text')\n        .attr('y', -30)\n        .attr('x', -innerHeight / 3)\n        .attr('fill', 'black')\n        .attr('font-size', 13)\n        .attr('transform', 'rotate(-90)')\n        .text('Survival Probability');\n\n      this.state.data.forEach((d) => this.drawKMCurve(viewer, d));\n\n      const height = 0;\n      const nodeWidth = (d) => d.getBBox().width;\n      const legend = svg\n        .append('g')\n        .attr('class', 'legend')\n        .attr('transform', `translate(${this.state.margin.left + innerWidth / 2},0)`);\n\n      const lg = legend\n        .selectAll('g')\n        .data(this.state.data)\n        .enter()\n        .append('g')\n        .attr('transform', (d, i) => `translate(${i * 100},${height + 15})`);\n\n      lg.append('rect')\n        .style('fill', (d) => this.color(d.key))\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 10)\n        .attr('height', 10);\n\n      lg.append('text')\n        .style('font-family', 'Georgia')\n        .style('font-size', '13px')\n        .attr('x', 17.5)\n        .attr('y', 10)\n        .text((d) => d.key);\n\n      let offset = 0;\n      lg.attr('transform', function transform() {\n        const x = offset;\n        offset += nodeWidth(this) + 10;\n        return `translate(${x},${height + 10})`;\n      });\n    }, 500);\n  }\n\n  transform(data, field) {\n    const { eventValue } = field;\n    const { censoredValue } = field;\n    const group = field.group.field;\n    const time = field.time.field;\n    const event = field.event.field;\n\n    const filteredData = data.filter(\n      (d) => d.collapsed_stage !== 'stage_x/NR'\n        && !isUndefined(d[time])\n        && !isUndefined(d[event])\n        && !isUndefined(d[group]),\n    );\n    this.maxTime = Math.max(...filteredData.map((d) => d[time]));\n    const groups = d3\n      .nest()\n      .key((d) => d[group])\n      .entries(filteredData);\n    const rs = [];\n    groups.forEach((g) => {\n      const { key } = g;\n      let risk = g.values.length;\n      const values = d3\n        .nest()\n        .key((d) => +d[time])\n        .sortKeys((a, b) => +a - +b)\n        .rollup((v) => ({\n          event: v.filter((d) => d[event] === eventValue).length,\n          censor: v.filter((d) => d[event] === censoredValue).length,\n        }))\n        .entries(g.values);\n      let p = 1;\n      const points = [];\n      values.forEach((d) => {\n        const currentTime = +d.key;\n        const e = d.value.event;\n        const c = d.value.censor;\n        if (currentTime < 0) return;\n        if (e > 0) {\n          p *= 1 - e / risk;\n          const censored = false;\n          points.push({ p, currentTime, censored });\n        }\n        if (c > 0) {\n          const censored = true;\n          points.push({ p, currentTime, censored });\n        }\n        risk -= e + c;\n      });\n      rs.push({ key, points });\n    });\n\n    return rs;\n  }\n\n  drawLine(viewer, points, color) {\n    const line = d3\n      .line()\n      .curve(d3.curveStepAfter)\n      .x((d) => this.xScale(d.time))\n      .y((d) => this.yScale(d.p));\n    viewer\n      .append('path')\n      .datum(points)\n      .attr('class', 'line')\n      .style('stroke', color)\n      .attr('d', line);\n\n    points.forEach((point) => {\n      if (point.censored) {\n        const p = [\n          {\n            p: point.p - 0.015,\n            time: point.time,\n          },\n          {\n            p: point.p + 0.015,\n            time: point.time,\n          },\n        ];\n        viewer.append('path').datum(p).attr('class', 'mark').style('stroke', color)\n          .attr('d', line);\n      }\n    });\n  }\n\n  drawKMCurve(viewer, d) {\n    // draw lines\n    this.drawLine(viewer, d.points, this.color(d.key));\n    // draw marks\n  }\n\n  render() {\n    return <div id={this.props.id} ref={this.self} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n  }\n}\n\nKMCurve.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired, time: PropTypes.shape() }).isRequired,\n  filter: PropTypes.shape({ field: PropTypes.string, value: PropTypes.string }),\n  id: PropTypes.string.isRequired,\n};\n\nKMCurve.defaultProps = {\n  filter: {},\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","Object","defineProperty","value","configurable","get","$27de1dd5e4f9ba3a$export$2e2bcd8739ae039","set","s","enumerable","$ayMG0","$acw62","$9NlP8","$c9Z8w","$27de1dd5e4f9ba3a$var$isUndefined","d","undefined","toLowerCase","PureComponent","constructor","props","self","createRef","maxTime","Number","NEGATIVE_INFINITY","state","margin","top","right","bottom","left","filter","data","transform","field","fields","componentDidMount","setTimeout","rect","current","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","select","append","attr","viewer","xScale","scaleLinear","domain","range","yScale","color","scaleOrdinal","map","key","quantize","t","interpolateSpectral","length","xaxisGroup","call","axisBottom","ticks","text","time","unit","yaxisGroup","axisLeft","forEach","drawKMCurve","nodeWidth","getBBox","lg","legend","selectAll","enter","i","style","offset","x","eventValue","censoredValue","group","event","filteredData","collapsed_stage","Math","max","groups","nest","entries","rs","g","risk","values","sortKeys","b","rollup","v","censor","p","points","currentTime","e","c","push","censored","drawLine","line","curve","curveStepAfter","y","datum","point","render","jsx","id","ref","role","propTypes","arrayOf","shape","isRequired","string","defaultProps"],"version":3,"file":"KMCurve.4c1198e3.js.map"}