{"mappings":"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","sources":["<anon>","source/components/VisualTools/Chart/DensityChart.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lSqO9\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $fed36f965ea78a82$export$2e2bcd8739ae039);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n\nvar $c9Z8w = parcelRequire(\"c9Z8w\");\n\nvar $63tWu = parcelRequire(\"63tWu\");\nfunction $fed36f965ea78a82$var$DensityChart(props) {\n    let startPosition = [\n        0,\n        0\n    ];\n    let endPosition = [\n        0,\n        0\n    ];\n    const self = (0, $acw62.useRef)();\n    const svg = (0, $acw62.useRef)();\n    const scales = (0, $acw62.useRef)({\n        x: $9NlP8.scaleLinear(),\n        y: $9NlP8.scaleLinear()\n    });\n    const margin = {\n        top: 10,\n        right: 30,\n        bottom: 20,\n        left: 40\n    };\n    const end = ()=>{\n        if (!$9NlP8.event.selection) return;\n        const [x0, y0] = [\n            Math.min(startPosition[0], endPosition[0]),\n            Math.min(startPosition[1], endPosition[1])\n        ];\n        const [x1, y1] = [\n            Math.max(startPosition[0], endPosition[0]),\n            Math.max(startPosition[1], endPosition[1])\n        ];\n        const filters = [\n            {\n                id: `${props.id}_x`,\n                title: props.title,\n                field: props.fields.x,\n                operation: 'range',\n                values: [\n                    (0, $63tWu.numFixed)(scales.current.x.invert(x0)),\n                    (0, $63tWu.numFixed)(scales.current.x.invert(x1))\n                ]\n            },\n            {\n                id: `${props.id}_y`,\n                title: props.title,\n                field: props.fields.y,\n                operation: 'range',\n                values: [\n                    (0, $63tWu.numFixed)(scales.current.y.invert(y1)),\n                    (0, $63tWu.numFixed)(scales.current.y.invert(y0))\n                ]\n            }\n        ];\n        props.filterAdded(filters);\n    };\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            $9NlP8.select(self.current).selectAll('svg').remove('svg');\n            const rect = self.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            svg.current = $9NlP8.select(self.current).append('svg').attr('width', rect.width).attr('height', rect.height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n            const paddingPercent = 0.1; // Adjust the percentage of padding as needed\n            const domainExtentX = $9NlP8.extent(props.data, (d)=>d[props.fields.x]);\n            const domainPaddingX = (domainExtentX[1] - domainExtentX[0]) * paddingPercent;\n            const domainExtentY = $9NlP8.extent(props.data, (d)=>d[props.fields.y]);\n            const domainPaddingY = (domainExtentY[1] - domainExtentY[0]) * paddingPercent;\n            scales.current.x.domain([\n                domainExtentX[0] - domainPaddingX,\n                domainExtentX[1] + domainPaddingX\n            ]).range([\n                0,\n                innerWidth\n            ]);\n            scales.current.y.domain([\n                domainExtentY[0] - domainPaddingY,\n                domainExtentY[1] + domainPaddingY\n            ]).range([\n                innerHeight,\n                0\n            ]);\n            svg.current.append('g').attr('transform', `translate(0,${innerHeight})`).call($9NlP8.axisBottom(scales.current.x));\n            svg.current.append('g').call($9NlP8.axisLeft(scales.current.y));\n            const getCurrentMouseClickPosition = ()=>{\n                const rec = svg.current.select('.overlay').node();\n                const mouseX = $9NlP8.event.sourceEvent.clientX - rec.getBoundingClientRect().x;\n                const mouseY = $9NlP8.event.sourceEvent.clientY - rec.getBoundingClientRect().y;\n                return [\n                    mouseX,\n                    mouseY\n                ];\n            };\n            const brush = $9NlP8.brush().extent([\n                [\n                    0,\n                    0\n                ],\n                [\n                    innerWidth,\n                    innerHeight\n                ]\n            ]).on('start', ()=>{\n                startPosition = getCurrentMouseClickPosition();\n                svg.current.selectAll('.selection').remove('rect');\n            }).on('brush', ()=>{\n                endPosition = getCurrentMouseClickPosition();\n                svg.current.selectAll('.selected-area').remove('.selected-area');\n                svg.current.selectAll('.selection').remove('rect');\n                const startX = Math.min(startPosition[0], endPosition[0]);\n                const startY = Math.min(startPosition[1], endPosition[1]);\n                const selectArea = svg.current.append('rect').attr('class', 'selected-area').attr('position', 'absolute').attr('x', startX).attr('y', startY).attr('width', Math.abs(endPosition[0] - startPosition[0])).attr('height', Math.abs(endPosition[1] - startPosition[1])).attr('fill', 'rgba(130, 130, 130, 0.5)');\n            }).on('end', ()=>{\n                endPosition = getCurrentMouseClickPosition();\n                svg.current.selectAll('.selected-area').remove('.selected-area');\n                svg.current.selectAll('.selection').remove('rect');\n                const startX = Math.min(startPosition[0], endPosition[0]);\n                const startY = Math.min(startPosition[1], endPosition[1]);\n                const selectedArea = svg.current.append('rect').attr('class', 'selected-area').attr('position', 'absolute').attr('x', startX).attr('y', startY).attr('width', Math.abs(endPosition[0] - startPosition[0])).attr('height', Math.abs(endPosition[1] - startPosition[1])).attr('fill', 'rgba(140, 140, 140, 0.5)');\n                end();\n                setTimeout(()=>{\n                    selectedArea.remove();\n                }, 20);\n            });\n            svg.current.append('g').call(brush);\n        }, 100);\n    }, [\n        props.layout\n    ]);\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            const rect = self.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            let { data: data } = props;\n            if (props.filters.length !== 0) data = props.filterData;\n            const k = 10 ** (-4 + Math.round(Math.log10(data.length)));\n            const color = $9NlP8.scaleLinear().domain([\n                0,\n                k\n            ]).range([\n                'white',\n                '#4682b4'\n            ]);\n            const densityData = $9NlP8.contourDensity().x((d)=>scales.current.x(d[props.fields.x])).y((d)=>scales.current.y(d[props.fields.y])).size([\n                innerWidth,\n                innerHeight\n            ]).bandwidth(20)(data);\n            svg.current.select('#draw_area').remove('g');\n            svg.current.insert('g', 'g').attr('id', 'draw_area').selectAll('path').data(densityData).enter().append('path').attr('d', $9NlP8.geoPath()).attr('fill', (d)=>color(d.value));\n        }, 100);\n    }, [\n        props.layout,\n        props.filters,\n        props.filterData\n    ]);\n    return /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n        id: props.id,\n        ref: self,\n        role: \"figure\",\n        style: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n}\nvar $fed36f965ea78a82$export$2e2bcd8739ae039 = $fed36f965ea78a82$var$DensityChart;\n$fed36f965ea78a82$var$DensityChart.propTypes = {\n    data: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    fields: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        x: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n        y: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired\n    }).isRequired,\n    id: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    filterData: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filters: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    layout: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        width: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired,\n        currentCols: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired\n    }).isRequired,\n    filterAdded: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).func.isRequired,\n    title: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired\n};\n\n});\n\n\n//# sourceMappingURL=DensityChart.9b9ea629.js.map\n","import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport { numFixed } from '../../../common/utils';\n\nfunction DensityChart(props) {\n  let startPosition = [0, 0];\n  let endPosition = [0, 0];\n  const self = useRef();\n  const svg = useRef();\n  const scales = useRef({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 20,\n    left: 40,\n  };\n\n  const end = () => {\n    if (!d3.event.selection) return;\n    const [x0, y0] = [Math.min(startPosition[0], endPosition[0]),\n      Math.min(startPosition[1], endPosition[1])];\n    const [x1, y1] = [Math.max(startPosition[0], endPosition[0]),\n      Math.max(startPosition[1], endPosition[1])];\n    const filters = [\n      {\n        id: `${props.id}_x`,\n        title: props.title,\n        field: props.fields.x,\n        operation: 'range',\n        values: [numFixed(scales.current.x.invert(x0)), numFixed(scales.current.x.invert(x1))],\n      },\n      {\n        id: `${props.id}_y`,\n        title: props.title,\n        field: props.fields.y,\n        operation: 'range',\n        values: [numFixed(scales.current.y.invert(y1)), numFixed(scales.current.y.invert(y0))],\n      },\n    ];\n    props.filterAdded(filters);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(self.current).selectAll('svg').remove('svg');\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      svg.current = d3\n        .select(self.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n      const paddingPercent = 0.1; // Adjust the percentage of padding as needed\n      const domainExtentX = d3.extent(props.data, (d) => d[props.fields.x]);\n      const domainPaddingX = (domainExtentX[1] - domainExtentX[0]) * paddingPercent;\n      const domainExtentY = d3.extent(props.data, (d) => d[props.fields.y]);\n      const domainPaddingY = (domainExtentY[1] - domainExtentY[0]) * paddingPercent;\n      scales.current.x\n        .domain([domainExtentX[0] - domainPaddingX,\n          domainExtentX[1] + domainPaddingX])\n        .range([0, innerWidth]);\n\n      scales.current.y\n        .domain([domainExtentY[0] - domainPaddingY,\n          domainExtentY[1] + domainPaddingY])\n        .range([innerHeight, 0]);\n\n      svg.current\n        .append('g')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(d3.axisBottom(scales.current.x));\n      svg.current.append('g').call(d3.axisLeft(scales.current.y));\n\n      const getCurrentMouseClickPosition = () => {\n        const rec = svg.current.select('.overlay').node();\n        const mouseX = d3.event.sourceEvent.clientX - rec.getBoundingClientRect().x;\n        const mouseY = d3.event.sourceEvent.clientY - rec.getBoundingClientRect().y;\n        return [mouseX, mouseY];\n      };\n\n      const brush = d3\n        .brush()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ]).on('start', () => {\n          startPosition = getCurrentMouseClickPosition();\n          svg.current.selectAll('.selection').remove('rect');\n        }).on('brush', () => {\n          endPosition = getCurrentMouseClickPosition();\n          svg.current.selectAll('.selected-area').remove('.selected-area');\n          svg.current.selectAll('.selection').remove('rect');\n          const startX = Math.min(startPosition[0], endPosition[0]);\n          const startY = Math.min(startPosition[1], endPosition[1]);\n          const selectArea = svg.current.append('rect')\n            .attr('class', 'selected-area')\n            .attr('position', 'absolute')\n            .attr('x', startX)\n            .attr('y', startY)\n            .attr('width', Math.abs(endPosition[0] - startPosition[0]))\n            .attr('height', Math.abs(endPosition[1] - startPosition[1]))\n            .attr('fill', 'rgba(130, 130, 130, 0.5)');\n        })\n        .on('end', () => {\n          endPosition = getCurrentMouseClickPosition();\n          svg.current.selectAll('.selected-area').remove('.selected-area');\n          svg.current.selectAll('.selection').remove('rect');\n          const startX = Math.min(startPosition[0], endPosition[0]);\n          const startY = Math.min(startPosition[1], endPosition[1]);\n          const selectedArea = svg.current.append('rect')\n            .attr('class', 'selected-area')\n            .attr('position', 'absolute')\n            .attr('x', startX)\n            .attr('y', startY)\n            .attr('width', Math.abs(endPosition[0] - startPosition[0]))\n            .attr('height', Math.abs(endPosition[1] - startPosition[1]))\n            .attr('fill', 'rgba(140, 140, 140, 0.5)');\n          end();\n          setTimeout(\n            () => {\n              selectedArea.remove();\n            },\n            20,\n          );\n        });\n\n      svg.current.append('g').call(brush);\n    }, 100);\n  }, [props.layout]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let { data } = props;\n      if (props.filters.length !== 0) data = props.filterData;\n\n      const k = 10 ** (-4 + Math.round(Math.log10(data.length)));\n      const color = d3.scaleLinear().domain([0, k]).range(['white', '#4682b4']);\n\n      const densityData = d3\n        .contourDensity()\n        .x((d) => scales.current.x(d[props.fields.x]))\n        .y((d) => scales.current.y(d[props.fields.y]))\n        .size([innerWidth, innerHeight])\n        .bandwidth(20)(data);\n\n      svg.current.select('#draw_area').remove('g');\n      svg.current\n        .insert('g', 'g')\n        .attr('id', 'draw_area')\n        .selectAll('path')\n        .data(densityData)\n        .enter()\n        .append('path')\n        .attr('d', d3.geoPath())\n        .attr('fill', (d) => color(d.value));\n    }, 100);\n  }, [props.layout, props.filters, props.filterData]);\n  return <div id={props.id} ref={self} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default DensityChart;\n\nDensityChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired, y: PropTypes.string.isRequired })\n    .isRequired,\n  id: PropTypes.string.isRequired,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","Object","defineProperty","value","configurable","get","$fed36f965ea78a82$export$2e2bcd8739ae039","set","s","enumerable","$ayMG0","$acw62","$9NlP8","$c9Z8w","$63tWu","$fed36f965ea78a82$var$DensityChart","props","startPosition","endPosition","self","useRef","svg","scales","x","scaleLinear","y","end","event","selection","x0","y0","Math","min","x1","y1","max","filters","id","title","field","fields","operation","values","numFixed","current","invert","filterAdded","useEffect","setTimeout","select","selectAll","remove","rect","getBoundingClientRect","innerWidth","width","innerHeight","height","append","attr","domainExtentX","extent","data","d","domainPaddingX","domainExtentY","domainPaddingY","domain","range","call","axisBottom","axisLeft","getCurrentMouseClickPosition","rec","node","sourceEvent","clientX","clientY","brush","on","startX","startY","abs","selectedArea","layout","length","filterData","k","round","log10","color","densityData","contourDensity","size","bandwidth","insert","enter","geoPath","jsx","ref","role","style","propTypes","arrayOf","shape","isRequired","string","number","currentCols","func"],"version":3,"file":"DensityChart.9b9ea629.js.map"}