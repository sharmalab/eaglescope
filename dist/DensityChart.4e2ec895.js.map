{"version":3,"sources":["components/VisualTools/Chart/DensityChart.js"],"names":["_react","_interopRequireWildcard","require","d3","_propTypes","_interopRequireDefault","_utils","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","toString","slice","constructor","name","Array","from","test","len","length","arr2","l","Symbol","iterator","f","next","done","push","value","return","isArray","DensityChart","props","self","useRef","svg","scales","x","scaleLinear","y","margin","end","event","selection","_d3$event$selection$","x0","y0","_d3$event$selection$2","x1","y1","filters","id","concat","title","field","fields","operation","values","numFixed","current","invert","filterAdded","useEffect","setTimeout","select","selectAll","remove","rect","getBoundingClientRect","innerWidth","width","innerHeight","height","append","attr","domain","extent","data","d","range","axisBottom","axisLeft","brush","on","layout","filterData","k","Math","pow","round","log10","color","densityData","contourDensity","size","bandwidth","insert","enter","geoPath","createElement","ref","style","_default","exports","propTypes","PropTypes","arrayOf","shape","isRequired","string","number","currentCols","func"],"mappings":"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","file":"DensityChart.4e2ec895.js","sourceRoot":"../source","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport { numFixed } from '../../../common/utils';\n\nfunction DensityChart(props) {\n  const self = useRef();\n  const svg = useRef();\n  const scales = useRef({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 20,\n    left: 40,\n  };\n\n  const end = () => {\n    if (!d3.event.selection) return;\n    const [x0, y0] = d3.event.selection[0];\n    const [x1, y1] = d3.event.selection[1];\n    const filters = [\n      {\n        id: `${props.id}_x`,\n        title: props.title,\n        field: props.fields.x,\n        operation: 'range',\n        values: [numFixed(scales.current.x.invert(x0)), numFixed(scales.current.x.invert(x1))],\n      },\n      {\n        id: `${props.id}_y`,\n        title: props.title,\n        field: props.fields.y,\n        operation: 'range',\n        values: [numFixed(scales.current.y.invert(y1)), numFixed(scales.current.y.invert(y0))],\n      },\n    ];\n    props.filterAdded(filters);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(self.current).selectAll('svg').remove('svg');\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      svg.current = d3\n        .select(self.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n      scales.current.x\n        .domain(d3.extent(props.data, (d) => d[props.fields.x]))\n        .range([0, innerWidth]);\n\n      scales.current.y\n        .domain(d3.extent(props.data, (d) => d[props.fields.y]))\n        .range([innerHeight, 0]);\n\n      svg.current\n        .append('g')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(d3.axisBottom(scales.current.x));\n      svg.current.append('g').call(d3.axisLeft(scales.current.y));\n\n      const brush = d3\n        .brush()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on('end', end);\n\n      svg.current.append('g').call(brush);\n    }, 100);\n  }, [props.layout]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let { data } = props;\n      if (props.filters.length !== 0) data = props.filterData;\n\n      const k = 10 ** (-4 + Math.round(Math.log10(data.length)));\n      const color = d3.scaleLinear().domain([0, k]).range(['white', '#4682b4']);\n\n      const densityData = d3\n        .contourDensity()\n        .x((d) => scales.current.x(d[props.fields.x]))\n        .y((d) => scales.current.y(d[props.fields.y]))\n        .size([innerWidth, innerHeight])\n        .bandwidth(20)(data);\n\n      svg.current.select('#draw_area').remove('g');\n      svg.current\n        .insert('g', 'g')\n        .attr('id', 'draw_area')\n        .attr('transform', `translate(${margin.left},${-margin.bottom})`)\n        .selectAll('path')\n        .data(densityData)\n        .enter()\n        .append('path')\n        .attr('d', d3.geoPath())\n        .attr('fill', (d) => color(d.value));\n    }, 100);\n  }, [props.layout, props.filters, props.filterData]);\n  return <div id={props.id} ref={self} style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default DensityChart;\n\nDensityChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired, y: PropTypes.string.isRequired })\n    .isRequired,\n  id: PropTypes.string.isRequired,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n"]}