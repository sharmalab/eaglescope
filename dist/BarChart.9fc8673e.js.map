{"mappings":"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","sources":["<anon>","source/components/VisualTools/Chart/BarChart.js","source/components/partials/tooltip.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lOjvX\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $fe0d67a98a125c5a$export$2e2bcd8739ae039);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n\nvar $c9Z8w = parcelRequire(\"c9Z8w\");\n\nvar $bN8Lq = parcelRequire(\"bN8Lq\");\nconst $fe0d67a98a125c5a$var$transformList = (data, f)=>{\n    const map = new Map();\n    data.forEach((d)=>{\n        const items = d[f];\n        if (Array.isArray(items)) items.forEach((i)=>{\n            if (!map.has(i)) map.set(i, 0);\n            map.set(i, map.get(i) + 1);\n        });\n        else {\n            if (!map.has(items)) map.set(items, 0);\n            map.set(items, map.get(items) + 1);\n        }\n    });\n    return Array.from(map).map((d)=>({\n            key: d[0],\n            value: d[1]\n        }));\n};\nconst $fe0d67a98a125c5a$var$transform = (data, field, isList = false)=>{\n    if (isList) return $fe0d67a98a125c5a$var$transformList(data, field);\n    const collator = new Intl.Collator(undefined, {\n        numeric: true,\n        sensitivity: 'base'\n    });\n    function collSort(a, b) {\n        return collator.compare(a, b);\n    }\n    return $9NlP8.nest().key((d)=>d[field]).sortKeys(collSort).rollup((v)=>v.length).entries(data);\n};\nconst $fe0d67a98a125c5a$var$wrap = (text, width)=>{\n    text.each(function updateBars() {\n        const currentText = $9NlP8.select(this);\n        const words = currentText.text().split(/\\s+/).reverse();\n        let word;\n        let line = [];\n        let lineNumber = 0;\n        const lineHeight = 1.1; // ems\n        const y = currentText.attr('y');\n        const dy = parseFloat(currentText.attr('dy'));\n        let tspan = currentText.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', `${dy}em`);\n        word = words.pop();\n        while(word){\n            line.push(word);\n            tspan.text(line.join(' '));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n                line = [\n                    word\n                ];\n                tspan = currentText.append('tspan').attr('x', 0).attr('y', y).attr('dy', `${++lineNumber * lineHeight + dy}em`).text(word);\n            }\n            word = words.pop();\n        }\n    });\n};\nfunction $fe0d67a98a125c5a$var$BarChart(props) {\n    const margin = {\n        top: 10,\n        right: 10,\n        bottom: 35,\n        left: 35\n    };\n    const fields = {\n        x: 'key',\n        y: 'value'\n    };\n    const fullData = $fe0d67a98a125c5a$var$transform(props.data, props.fields.x, props.fields.isList);\n    const self = (0, $acw62.useRef)();\n    const scaleRef = (0, $acw62.useRef)();\n    const hightRef = (0, $acw62.useRef)();\n    const viewerRef = (0, $acw62.useRef)();\n    const createXScale = (f, width)=>{\n        // set the ranges\n        const xScale = $9NlP8.scaleBand().domain(fullData.map((d)=>d[f]).flat()).range([\n            0,\n            width\n        ]).padding(0.1);\n        return xScale;\n    };\n    const createYScale = (f, height)=>{\n        const yScale = $9NlP8.scaleLinear().domain([\n            0,\n            $9NlP8.max(fullData, (d)=>d[f])\n        ]).range([\n            height,\n            0\n        ]);\n        return yScale;\n    };\n    const drawBar = (selection, data, className = 'og')=>{\n        const addLabel = (d)=>`${d.key}: ${d.value}`;\n        const offset = {\n            x: 60,\n            y: 0\n        };\n        const tooltipHandlers = (0, $bN8Lq.default)(self.current, addLabel, offset);\n        const updateBars = selection.selectAll(`rect.${className}`).data(data, (d)=>d[fields.x]);\n        const enterBars = updateBars.enter().append('rect');\n        enterBars.attr('class', `${className}`).attr('x', (d)=>scaleRef.current.x(d[fields.x])).attr('width', scaleRef.current.x.bandwidth()).attr('y', hightRef.current).attr('role', 'graphics-symbol');\n        enterBars.on('mousemove', tooltipHandlers.mousemove).on('mouseleave', tooltipHandlers.mouseleave).on('click', (currentData)=>{\n            const selected = enterBars.filter((d)=>d === currentData);\n            const value = selected.data()[0].key;\n            const filter = props?.fields?.isList ? {\n                id: props.id,\n                title: props.title,\n                field: props.fields.x,\n                operation: 'has',\n                values: value\n            } : {\n                id: props.id,\n                title: props.title,\n                field: props.fields.x,\n                operation: 'eq',\n                values: value\n            };\n            props.filterAdded([\n                filter\n            ]);\n        });\n        updateBars.merge(enterBars).transition().duration(1000).attr('y', (d)=>scaleRef.current.y(d[fields.y])).attr('height', (d)=>hightRef.current - scaleRef.current.y(d[fields.y]));\n        // update_bars\n        updateBars.exit().transition().duration(1000).attr('y', hightRef.current).attr('height', 0).remove();\n        return updateBars;\n    };\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            $9NlP8.select(self.current).selectAll('svg').remove('svg');\n            const rect = self.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            hightRef.current = innerHeight;\n            // create svg\n            const svg = $9NlP8.select(self.current).append('svg').attr('width', rect.width).attr('height', rect.height).attr('role', 'img');\n            // create viewer\n            viewerRef.current = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n            const xScale = createXScale(fields.x, innerWidth);\n            const yScale = createYScale(fields.y, innerHeight);\n            scaleRef.current = {\n                x: xScale,\n                y: yScale\n            };\n            const xAxis = $9NlP8.axisBottom(xScale);\n            viewerRef.current.append('g').attr('class', 'x axis').attr('transform', `translate(0,${innerHeight})`).call(xAxis).selectAll('.tick text').call($fe0d67a98a125c5a$var$wrap, xScale.bandwidth());\n            // add the y Axis\n            const yAxis = $9NlP8.axisLeft(yScale).tickSize(-innerWidth);\n            viewerRef.current.append('g').call(yAxis);\n            drawBar(viewerRef.current, fullData, 'og');\n        }, 100);\n    }, [\n        props.layout\n    ]);\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            let data = [];\n            if (props.filters.length > 0) data = $fe0d67a98a125c5a$var$transform(props.filterData, props.fields.x, props.fields.isList);\n            else data = fullData;\n            drawBar(viewerRef.current, data, 'ft');\n        }, 100);\n    }, [\n        props.filters,\n        props.filterData,\n        props.layout\n    ]);\n    return /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n        id: props.id,\n        ref: self,\n        role: \"figure\",\n        style: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n}\nvar $fe0d67a98a125c5a$export$2e2bcd8739ae039 = $fe0d67a98a125c5a$var$BarChart;\n$fe0d67a98a125c5a$var$BarChart.propTypes = {\n    data: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    fields: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        x: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n        isList: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).bool\n    }).isRequired,\n    id: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    title: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    filterData: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filters: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filterAdded: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).func.isRequired,\n    layout: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        width: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired,\n        currentCols: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired\n    }).isRequired\n};\n\n});\nparcelRegister(\"bN8Lq\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $895b11a613892f4e$export$2e2bcd8739ae039);\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n/**\n * @function createTooltip\n * @description creates a tooltip dev and mount it to\n * the chart\n * @param {*} mount reference to the chart to mount tooltip on\n * @param {Function} addLabel function to generate text inside tooltip\n * @param {Object} offset the x and y offset from mouse position to position tooltip\n * @returns {Object} contains to function mousemove and mouseleave handlers\n */ function $895b11a613892f4e$var$createTooltip(mount, addLabel, offset) {\n    const tooltip = $9NlP8.select(mount).append('div').style('opacity', 1).attr('class', 'tooltip').style('display', 'none').style('background-color', 'white').style('border', 'solid').style('border-width', '2px').style('border-radius', '5px').style('padding', '5px');\n    const mousemove = function move(d) {\n        tooltip.html(addLabel(d)).style('display', '').style('left', `${offset.x + $9NlP8.mouse(this)[0]}px`).style('top', `${offset.y + $9NlP8.mouse(this)[1]}px`);\n    };\n    const mouseleave = function leave() {\n        tooltip.style('display', 'none');\n    };\n    return {\n        mousemove: mousemove,\n        mouseleave: mouseleave\n    };\n}\nvar $895b11a613892f4e$export$2e2bcd8739ae039 = $895b11a613892f4e$var$createTooltip;\n\n});\n\n\n\n//# sourceMappingURL=BarChart.9fc8673e.js.map\n","import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport createTooltip from '../../partials/tooltip';\n\nconst transformList = (data, f) => {\n  const map = new Map();\n  data.forEach((d) => {\n    const items = d[f];\n    if (Array.isArray(items)) {\n      items.forEach((i) => {\n        if (!map.has(i)) { map.set(i, 0); }\n        map.set(i, map.get(i) + 1);\n      });\n    } else {\n      if (!map.has(items)) { map.set(items, 0); }\n      map.set(items, map.get(items) + 1);\n    }\n  });\n  return Array.from(map).map((d) => ({ key: d[0], value: d[1] }));\n};\n\nconst transform = (data, field, isList = false) => {\n  if (isList) {\n    return transformList(data, field);\n  }\n  const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n  function collSort(a, b) {\n    return collator.compare(a, b);\n  }\n  return d3.nest().key((d) => d[field])\n    .sortKeys(collSort)\n    .rollup((v) => v.length)\n    .entries(data);\n};\n\nconst wrap = (text, width) => {\n  text.each(function updateBars() {\n    const currentText = d3.select(this);\n    const words = currentText.text().split(/\\s+/).reverse();\n    let word;\n    let line = [];\n    let lineNumber = 0;\n    const lineHeight = 1.1; // ems\n    const y = currentText.attr('y');\n    const dy = parseFloat(currentText.attr('dy'));\n    let tspan = currentText\n      .text(null)\n      .append('tspan')\n      .attr('x', 0)\n      .attr('y', y)\n      .attr('dy', `${dy}em`);\n    word = words.pop();\n    while (word) {\n      line.push(word);\n      tspan.text(line.join(' '));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(' '));\n        line = [word];\n        tspan = currentText\n          .append('tspan')\n          .attr('x', 0)\n          .attr('y', y)\n          .attr('dy', `${++lineNumber * lineHeight + dy}em`)\n          .text(word);\n      }\n      word = words.pop();\n    }\n  });\n};\n\nfunction BarChart(props) {\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 35,\n    left: 35,\n  };\n\n  const fields = { x: 'key', y: 'value' };\n  const fullData = transform(props.data, props.fields.x, props.fields.isList);\n  const self = useRef();\n  const scaleRef = useRef();\n  const hightRef = useRef();\n  const viewerRef = useRef();\n\n  const createXScale = (f, width) => {\n    // set the ranges\n    const xScale = d3\n      .scaleBand()\n      .domain(fullData.map((d) => d[f]).flat())\n      .range([0, width])\n      .padding(0.1);\n    return xScale;\n  };\n\n  const createYScale = (f, height) => {\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(fullData, (d) => d[f])])\n      .range([height, 0]);\n    return yScale;\n  };\n\n  const drawBar = (selection, data, className = 'og') => {\n    const addLabel = (d) => `${d.key}: ${d.value}`;\n    const offset = {\n      x: 60,\n      y: 0,\n    };\n    const tooltipHandlers = createTooltip(self.current, addLabel, offset);\n    const updateBars = selection.selectAll(`rect.${className}`).data(data, (d) => d[fields.x]);\n\n    const enterBars = updateBars.enter().append('rect');\n    enterBars\n      .attr('class', `${className}`)\n      .attr('x', (d) => scaleRef.current.x(d[fields.x]))\n      .attr('width', scaleRef.current.x.bandwidth())\n      .attr('y', hightRef.current)\n      .attr('role', 'graphics-symbol');\n    enterBars\n      .on('mousemove', tooltipHandlers.mousemove)\n      .on('mouseleave', tooltipHandlers.mouseleave)\n      .on('click', (currentData) => {\n        const selected = enterBars.filter((d) => d === currentData);\n        const value = selected.data()[0].key;\n        const filter = props?.fields?.isList ? {\n          id: props.id,\n          title: props.title,\n          field: props.fields.x,\n          operation: 'has',\n          values: value,\n        } : {\n          id: props.id,\n          title: props.title,\n          field: props.fields.x,\n          operation: 'eq',\n          values: value,\n        };\n        props.filterAdded([filter]);\n      });\n\n    updateBars\n      .merge(enterBars)\n      .transition()\n      .duration(1000)\n      .attr('y', (d) => scaleRef.current.y(d[fields.y]))\n      .attr('height', (d) => hightRef.current - scaleRef.current.y(d[fields.y]));\n\n    // update_bars\n    updateBars\n      .exit()\n      .transition()\n      .duration(1000)\n      .attr('y', hightRef.current)\n      .attr('height', 0)\n      .remove();\n\n    return updateBars;\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(self.current).selectAll('svg').remove('svg');\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n      hightRef.current = innerHeight;\n\n      // create svg\n      const svg = d3\n        .select(self.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .attr('role', 'img');\n      // create viewer\n      viewerRef.current = svg\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n      const xScale = createXScale(fields.x, innerWidth);\n      const yScale = createYScale(fields.y, innerHeight);\n      scaleRef.current = { x: xScale, y: yScale };\n\n      const xAxis = d3.axisBottom(xScale);\n      viewerRef.current\n        .append('g')\n        .attr('class', 'x axis')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(xAxis)\n        .selectAll('.tick text')\n        .call(wrap, xScale.bandwidth());\n\n      // add the y Axis\n      const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth);\n      viewerRef.current.append('g').call(yAxis);\n\n      drawBar(viewerRef.current, fullData, 'og');\n    }, 100);\n  }, [props.layout]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      let data = [];\n      if (props.filters.length > 0) {\n        data = transform(props.filterData, props.fields.x, props.fields.isList);\n      } else {\n        data = fullData;\n      }\n      drawBar(viewerRef.current, data, 'ft');\n    }, 100);\n  }, [props.filters, props.filterData, props.layout]);\n\n  return <div id={props.id} ref={self} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default BarChart;\n\nBarChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired, isList: PropTypes.bool }).isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import * as d3 from 'd3';\n\n/**\n * @function createTooltip\n * @description creates a tooltip dev and mount it to\n * the chart\n * @param {*} mount reference to the chart to mount tooltip on\n * @param {Function} addLabel function to generate text inside tooltip\n * @param {Object} offset the x and y offset from mouse position to position tooltip\n * @returns {Object} contains to function mousemove and mouseleave handlers\n */\n\nfunction createTooltip(mount, addLabel, offset) {\n  const tooltip = d3\n    .select(mount)\n    .append('div')\n    .style('opacity', 1)\n    .attr('class', 'tooltip')\n    .style('display', 'none')\n    .style('background-color', 'white')\n    .style('border', 'solid')\n    .style('border-width', '2px')\n    .style('border-radius', '5px')\n    .style('padding', '5px');\n\n  const mousemove = function move(d) {\n    tooltip\n      .html(addLabel(d))\n      .style('display', '')\n      .style('left', `${offset.x + d3.mouse(this)[0]}px`)\n      .style('top', `${offset.y + d3.mouse(this)[1]}px`);\n  };\n\n  const mouseleave = function leave() {\n    tooltip.style('display', 'none');\n  };\n\n  return { mousemove, mouseleave };\n}\n\nexport default createTooltip;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","value","$fe0d67a98a125c5a$export$2e2bcd8739ae039","$ayMG0","$acw62","$9NlP8","$c9Z8w","$bN8Lq","$fe0d67a98a125c5a$var$transformList","data","f","map","Map","forEach","d","items","Array","isArray","i","has","from","key","$fe0d67a98a125c5a$var$transform","field","isList","collator","Intl","Collator","undefined","numeric","sensitivity","nest","sortKeys","b","compare","rollup","length","entries","$fe0d67a98a125c5a$var$wrap","text","width","each","word","currentText","select","words","split","reverse","line","lineNumber","y","attr","dy","parseFloat","tspan","append","pop","push","join","node","getComputedTextLength","$fe0d67a98a125c5a$var$BarChart","props","fullData","fields","x","self","useRef","scaleRef","hightRef","viewerRef","createXScale","scaleBand","domain","flat","range","padding","createYScale","height","scaleLinear","max","drawBar","selection","className","tooltipHandlers","current","updateBars","selectAll","enterBars","enter","bandwidth","on","mousemove","mouseleave","currentData","selected","filter","id","title","operation","values","filterAdded","merge","transition","duration","exit","remove","useEffect","setTimeout","rect","getBoundingClientRect","innerWidth","innerHeight","svg","xScale","yScale","xAxis","axisBottom","call","yAxis","axisLeft","tickSize","layout","filters","filterData","jsx","ref","role","style","propTypes","arrayOf","shape","isRequired","string","bool","func","number","currentCols","$895b11a613892f4e$export$2e2bcd8739ae039","mount","addLabel","offset","tooltip","html","mouse"],"version":3,"file":"BarChart.9fc8673e.js.map"}