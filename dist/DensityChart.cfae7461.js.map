{"mappings":"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","sources":["<anon>","source/components/VisualTools/Chart/DensityChart.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lSqO9\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $fed36f965ea78a82$export$2e2bcd8739ae039);\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n\nvar $c9Z8w = parcelRequire(\"c9Z8w\");\n\nvar $63tWu = parcelRequire(\"63tWu\");\nfunction $fed36f965ea78a82$var$DensityChart(props) {\n    let startPosition = [\n        0,\n        0\n    ];\n    let endPosition = [\n        0,\n        0\n    ];\n    const self = (0, $acw62.useRef)();\n    const svg = (0, $acw62.useRef)();\n    const scales = (0, $acw62.useRef)({\n        x: $9NlP8.scaleLinear(),\n        y: $9NlP8.scaleLinear()\n    });\n    const margin = {\n        top: 10,\n        right: 30,\n        bottom: 20,\n        left: 40\n    };\n    const end = ()=>{\n        if (!$9NlP8.event.selection) return;\n        const [x0, y0] = [\n            Math.min(startPosition[0], endPosition[0]),\n            Math.min(startPosition[1], endPosition[1])\n        ];\n        const [x1, y1] = [\n            Math.max(startPosition[0], endPosition[0]),\n            Math.max(startPosition[1], endPosition[1])\n        ];\n        const filters = [\n            {\n                id: `${props.id}_x`,\n                title: props.title,\n                field: props.fields.x,\n                operation: 'range',\n                values: [\n                    (0, $63tWu.numFixed)(scales.current.x.invert(x0)),\n                    (0, $63tWu.numFixed)(scales.current.x.invert(x1))\n                ]\n            },\n            {\n                id: `${props.id}_y`,\n                title: props.title,\n                field: props.fields.y,\n                operation: 'range',\n                values: [\n                    (0, $63tWu.numFixed)(scales.current.y.invert(y1)),\n                    (0, $63tWu.numFixed)(scales.current.y.invert(y0))\n                ]\n            }\n        ];\n        props.filterAdded(filters);\n    };\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            $9NlP8.select(self.current).selectAll('svg').remove('svg');\n            const rect = self.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            svg.current = $9NlP8.select(self.current).append('svg').attr('width', rect.width).attr('height', rect.height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n            const paddingPercent = 0.1; // Adjust the percentage of padding as needed\n            const domainExtentX = $9NlP8.extent(props.data, (d)=>d[props.fields.x]);\n            const domainPaddingX = (domainExtentX[1] - domainExtentX[0]) * paddingPercent;\n            const domainExtentY = $9NlP8.extent(props.data, (d)=>d[props.fields.y]);\n            const domainPaddingY = (domainExtentY[1] - domainExtentY[0]) * paddingPercent;\n            scales.current.x.domain([\n                domainExtentX[0] - domainPaddingX,\n                domainExtentX[1] + domainPaddingX\n            ]).range([\n                0,\n                innerWidth\n            ]);\n            scales.current.y.domain([\n                domainExtentY[0] - domainPaddingY,\n                domainExtentY[1] + domainPaddingY\n            ]).range([\n                innerHeight,\n                0\n            ]);\n            svg.current.append('g').attr('transform', `translate(0,${innerHeight})`).call($9NlP8.axisBottom(scales.current.x));\n            svg.current.append('g').call($9NlP8.axisLeft(scales.current.y));\n            const getCurrentMouseClickPosition = ()=>{\n                const rec = svg.current.select('.overlay').node();\n                const mouseX = $9NlP8.event.sourceEvent.clientX - rec.getBoundingClientRect().x;\n                const mouseY = $9NlP8.event.sourceEvent.clientY - rec.getBoundingClientRect().y;\n                return [\n                    mouseX,\n                    mouseY\n                ];\n            };\n            const brush = $9NlP8.brush().extent([\n                [\n                    0,\n                    0\n                ],\n                [\n                    innerWidth,\n                    innerHeight\n                ]\n            ]).on('start', ()=>{\n                startPosition = getCurrentMouseClickPosition();\n                svg.current.selectAll('.selection').remove('rect');\n            }).on('brush', ()=>{\n                endPosition = getCurrentMouseClickPosition();\n                svg.current.selectAll('.selected-area').remove('.selected-area');\n                svg.current.selectAll('.selection').remove('rect');\n                const startX = Math.min(startPosition[0], endPosition[0]);\n                const startY = Math.min(startPosition[1], endPosition[1]);\n                const selectArea = svg.current.append('rect').attr('class', 'selected-area').attr('position', 'absolute').attr('x', startX).attr('y', startY).attr('width', Math.abs(endPosition[0] - startPosition[0])).attr('height', Math.abs(endPosition[1] - startPosition[1])).attr('fill', 'rgba(130, 130, 130, 0.5)');\n            }).on('end', ()=>{\n                endPosition = getCurrentMouseClickPosition();\n                svg.current.selectAll('.selected-area').remove('.selected-area');\n                svg.current.selectAll('.selection').remove('rect');\n                const startX = Math.min(startPosition[0], endPosition[0]);\n                const startY = Math.min(startPosition[1], endPosition[1]);\n                const selectedArea = svg.current.append('rect').attr('class', 'selected-area').attr('position', 'absolute').attr('x', startX).attr('y', startY).attr('width', Math.abs(endPosition[0] - startPosition[0])).attr('height', Math.abs(endPosition[1] - startPosition[1])).attr('fill', 'rgba(140, 140, 140, 0.5)');\n                end();\n                setTimeout(()=>{\n                    selectedArea.remove();\n                }, 20);\n            });\n            svg.current.append('g').call(brush);\n        }, 100);\n    }, [\n        props.layout\n    ]);\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            const rect = self.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            let { data: data } = props;\n            if (props.filters.length !== 0) data = props.filterData;\n            const k = 10 ** (-4 + Math.round(Math.log10(data.length)));\n            const color = $9NlP8.scaleLinear().domain([\n                0,\n                k\n            ]).range([\n                'white',\n                '#4682b4'\n            ]);\n            const densityData = $9NlP8.contourDensity().x((d)=>scales.current.x(d[props.fields.x])).y((d)=>scales.current.y(d[props.fields.y])).size([\n                innerWidth,\n                innerHeight\n            ]).bandwidth(20)(data);\n            svg.current.select('#draw_area').remove('g');\n            svg.current.insert('g', 'g').attr('id', 'draw_area').selectAll('path').data(densityData).enter().append('path').attr('d', $9NlP8.geoPath()).attr('fill', (d)=>color(d.value));\n        }, 100);\n    }, [\n        props.layout,\n        props.filters,\n        props.filterData\n    ]);\n    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).createElement(\"div\", {\n        id: props.id,\n        ref: self,\n        role: \"figure\",\n        style: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n}\nvar $fed36f965ea78a82$export$2e2bcd8739ae039 = $fed36f965ea78a82$var$DensityChart;\n$fed36f965ea78a82$var$DensityChart.propTypes = {\n    data: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    fields: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        x: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n        y: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired\n    }).isRequired,\n    id: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    filterData: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filters: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    layout: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        width: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired,\n        currentCols: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired\n    }).isRequired,\n    filterAdded: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).func.isRequired,\n    title: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired\n};\n\n});\n\n\n//# sourceMappingURL=DensityChart.cfae7461.js.map\n","import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport { numFixed } from '../../../common/utils';\n\nfunction DensityChart(props) {\n  let startPosition = [0, 0];\n  let endPosition = [0, 0];\n  const self = useRef();\n  const svg = useRef();\n  const scales = useRef({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const margin = {\n    top: 10,\n    right: 30,\n    bottom: 20,\n    left: 40,\n  };\n\n  const end = () => {\n    if (!d3.event.selection) return;\n    const [x0, y0] = [Math.min(startPosition[0], endPosition[0]),\n      Math.min(startPosition[1], endPosition[1])];\n    const [x1, y1] = [Math.max(startPosition[0], endPosition[0]),\n      Math.max(startPosition[1], endPosition[1])];\n    const filters = [\n      {\n        id: `${props.id}_x`,\n        title: props.title,\n        field: props.fields.x,\n        operation: 'range',\n        values: [numFixed(scales.current.x.invert(x0)), numFixed(scales.current.x.invert(x1))],\n      },\n      {\n        id: `${props.id}_y`,\n        title: props.title,\n        field: props.fields.y,\n        operation: 'range',\n        values: [numFixed(scales.current.y.invert(y1)), numFixed(scales.current.y.invert(y0))],\n      },\n    ];\n    props.filterAdded(filters);\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(self.current).selectAll('svg').remove('svg');\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      svg.current = d3\n        .select(self.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n      const paddingPercent = 0.1; // Adjust the percentage of padding as needed\n      const domainExtentX = d3.extent(props.data, (d) => d[props.fields.x]);\n      const domainPaddingX = (domainExtentX[1] - domainExtentX[0]) * paddingPercent;\n      const domainExtentY = d3.extent(props.data, (d) => d[props.fields.y]);\n      const domainPaddingY = (domainExtentY[1] - domainExtentY[0]) * paddingPercent;\n      scales.current.x\n        .domain([domainExtentX[0] - domainPaddingX,\n          domainExtentX[1] + domainPaddingX])\n        .range([0, innerWidth]);\n\n      scales.current.y\n        .domain([domainExtentY[0] - domainPaddingY,\n          domainExtentY[1] + domainPaddingY])\n        .range([innerHeight, 0]);\n\n      svg.current\n        .append('g')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(d3.axisBottom(scales.current.x));\n      svg.current.append('g').call(d3.axisLeft(scales.current.y));\n\n      const getCurrentMouseClickPosition = () => {\n        const rec = svg.current.select('.overlay').node();\n        const mouseX = d3.event.sourceEvent.clientX - rec.getBoundingClientRect().x;\n        const mouseY = d3.event.sourceEvent.clientY - rec.getBoundingClientRect().y;\n        return [mouseX, mouseY];\n      };\n\n      const brush = d3\n        .brush()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ]).on('start', () => {\n          startPosition = getCurrentMouseClickPosition();\n          svg.current.selectAll('.selection').remove('rect');\n        }).on('brush', () => {\n          endPosition = getCurrentMouseClickPosition();\n          svg.current.selectAll('.selected-area').remove('.selected-area');\n          svg.current.selectAll('.selection').remove('rect');\n          const startX = Math.min(startPosition[0], endPosition[0]);\n          const startY = Math.min(startPosition[1], endPosition[1]);\n          const selectArea = svg.current.append('rect')\n            .attr('class', 'selected-area')\n            .attr('position', 'absolute')\n            .attr('x', startX)\n            .attr('y', startY)\n            .attr('width', Math.abs(endPosition[0] - startPosition[0]))\n            .attr('height', Math.abs(endPosition[1] - startPosition[1]))\n            .attr('fill', 'rgba(130, 130, 130, 0.5)');\n        })\n        .on('end', () => {\n          endPosition = getCurrentMouseClickPosition();\n          svg.current.selectAll('.selected-area').remove('.selected-area');\n          svg.current.selectAll('.selection').remove('rect');\n          const startX = Math.min(startPosition[0], endPosition[0]);\n          const startY = Math.min(startPosition[1], endPosition[1]);\n          const selectedArea = svg.current.append('rect')\n            .attr('class', 'selected-area')\n            .attr('position', 'absolute')\n            .attr('x', startX)\n            .attr('y', startY)\n            .attr('width', Math.abs(endPosition[0] - startPosition[0]))\n            .attr('height', Math.abs(endPosition[1] - startPosition[1]))\n            .attr('fill', 'rgba(140, 140, 140, 0.5)');\n          end();\n          setTimeout(\n            () => {\n              selectedArea.remove();\n            },\n            20,\n          );\n        });\n\n      svg.current.append('g').call(brush);\n    }, 100);\n  }, [props.layout]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let { data } = props;\n      if (props.filters.length !== 0) data = props.filterData;\n\n      const k = 10 ** (-4 + Math.round(Math.log10(data.length)));\n      const color = d3.scaleLinear().domain([0, k]).range(['white', '#4682b4']);\n\n      const densityData = d3\n        .contourDensity()\n        .x((d) => scales.current.x(d[props.fields.x]))\n        .y((d) => scales.current.y(d[props.fields.y]))\n        .size([innerWidth, innerHeight])\n        .bandwidth(20)(data);\n\n      svg.current.select('#draw_area').remove('g');\n      svg.current\n        .insert('g', 'g')\n        .attr('id', 'draw_area')\n        .selectAll('path')\n        .data(densityData)\n        .enter()\n        .append('path')\n        .attr('d', d3.geoPath())\n        .attr('fill', (d) => color(d.value));\n    }, 100);\n  }, [props.layout, props.filters, props.filterData]);\n  return <div id={props.id} ref={self} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default DensityChart;\n\nDensityChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired, y: PropTypes.string.isRequired })\n    .isRequired,\n  id: PropTypes.string.isRequired,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","Object","defineProperty","value","configurable","get","$fed36f965ea78a82$export$2e2bcd8739ae039","set","s","enumerable","$acw62","$9NlP8","$c9Z8w","$63tWu","$fed36f965ea78a82$var$DensityChart","props","startPosition","endPosition","self","useRef","svg","scales","x","scaleLinear","y","end","event","selection","x0","y0","Math","min","x1","y1","max","filters","id","title","field","fields","operation","values","numFixed","current","invert","filterAdded","useEffect","setTimeout","select","selectAll","remove","rect","getBoundingClientRect","innerWidth","width","innerHeight","height","append","attr","domainExtentX","extent","data","d","domainPaddingX","domainExtentY","domainPaddingY","domain","range","call","axisBottom","axisLeft","getCurrentMouseClickPosition","rec","node","sourceEvent","clientX","clientY","brush","on","startX","startY","abs","selectedArea","layout","length","filterData","k","round","log10","color","densityData","contourDensity","size","bandwidth","insert","enter","geoPath","createElement","ref","role","style","propTypes","arrayOf","shape","isRequired","string","number","currentCols","func","React","d3","PropTypes","DensityChart","margin","top","right","bottom","left","paddingPercent","mouseX","mouseY","selectArea"],"version":3,"file":"DensityChart.cfae7461.js.map"}