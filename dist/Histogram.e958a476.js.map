{"mappings":"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","sources":["<anon>","source/components/VisualTools/Chart/Histogram.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"92AJR\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $6950cc8086f38765$export$2e2bcd8739ae039);\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n\nvar $c9Z8w = parcelRequire(\"c9Z8w\");\n\nvar $63tWu = parcelRequire(\"63tWu\");\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to create histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters\n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */ function $6950cc8086f38765$var$Histogram({ data: data, fields: fields, id: id, binsCount: binsCount = 10, filterData: filterData, filters: filters, filterAdded: filterAdded, layout: layout }) {\n    const svgRef = (0, $acw62.useRef)();\n    const [Scales] = (0, $acw62.useState)({\n        x: $9NlP8.scaleLinear(),\n        y: $9NlP8.scaleLinear()\n    });\n    const [histogram] = (0, $acw62.useState)({\n        hist: $9NlP8.histogram(),\n        bins: null\n    });\n    const margin = {\n        top: 10,\n        right: 10,\n        bottom: 30,\n        left: 40\n    };\n    // initialize svg and draw base histogram\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            $9NlP8.select(svgRef.current).selectAll('svg').remove('svg');\n            const rect = svgRef.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            const svg = $9NlP8.select(svgRef.current).append('svg').attr('width', rect.width).attr('height', rect.height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n            Scales.x.domain([\n                0,\n                $9NlP8.max(data, (d)=>d[fields.x])\n            ]).range([\n                0,\n                innerWidth\n            ]);\n            histogram.hist.value((d)=>d[fields.x]).domain(Scales.x.domain()).thresholds(Scales.x.ticks(binsCount));\n            histogram.bins = histogram.hist(data);\n            Scales.y = $9NlP8.scaleLinear().range([\n                innerHeight,\n                0\n            ]).domain([\n                0,\n                $9NlP8.max(histogram.bins, (d)=>d.length)\n            ]);\n            // brush\n            const brush = $9NlP8.brushX().extent([\n                [\n                    0,\n                    0\n                ],\n                [\n                    innerWidth,\n                    innerHeight\n                ]\n            ]).on('end', ()=>{\n                if ($9NlP8.event.selection) {\n                    const [x0, x1] = [\n                        $9NlP8.event.selection[0],\n                        $9NlP8.event.selection[1]\n                    ];\n                    filterAdded([\n                        {\n                            id: id,\n                            field: fields.x,\n                            operation: 'range',\n                            values: [\n                                (0, $63tWu.numFixed)(Scales.x.invert(x0)),\n                                (0, $63tWu.numFixed)(Scales.x.invert(x1))\n                            ]\n                        }\n                    ]);\n                }\n            });\n            svg.append('g').call(brush);\n            // draw x-axis\n            svg.append('g').attr('transform', `translate(0,${innerHeight})`).call($9NlP8.axisBottom(Scales.x));\n            // draw y-axis\n            const view = svg.append('g').call($9NlP8.axisLeft(Scales.y)).append('g').attr('class', 'hist-area');\n            // draw histogram rectangles\n            view.selectAll('.bar').data(histogram.bins).join('rect').attr('class', 'bar').attr('x', 1).attr('transform', (d)=>`translate(${Scales.x(d.x0)},${Scales.y(d.length)})`).attr('width', (d)=>Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0)).attr('height', (d)=>innerHeight - Scales.y(d.length)).style('fill', '#87CEFA');\n        }, 100);\n    }, [\n        layout\n    ]);\n    // draw filtered histogram\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            const rect = svgRef.current.getBoundingClientRect();\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            let { bins: bins } = histogram;\n            if (filters.length !== 0) bins = histogram.hist(filterData);\n            $9NlP8.select(svgRef.current).selectAll('.hist-area').selectAll('.bar-f').data(bins).join('rect').attr('class', 'bar-f').style('transform', 'scale(1, -1)').attr('x', (d)=>Scales.x(d.x0)).attr('y', ()=>-innerHeight).transition().duration(1000).attr('width', (d)=>Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0)).attr('height', (d)=>innerHeight - Scales.y(d.length)).style('fill', '#4682B4');\n        }, 100);\n    }, [\n        filters,\n        filterData,\n        layout\n    ]);\n    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).createElement(\"div\", {\n        id: id,\n        ref: svgRef,\n        role: \"figure\",\n        style: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n}\nvar $6950cc8086f38765$export$2e2bcd8739ae039 = $6950cc8086f38765$var$Histogram;\n$6950cc8086f38765$var$Histogram.propTypes = {\n    data: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    fields: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        x: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired\n    }).isRequired,\n    id: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    binsCount: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number,\n    filterData: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filters: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filterAdded: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).func.isRequired,\n    layout: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        width: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired,\n        currentCols: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired\n    }).isRequired\n};\n$6950cc8086f38765$var$Histogram.defaultProps = {\n    binsCount: 10\n};\n\n});\n\n\n//# sourceMappingURL=Histogram.e958a476.js.map\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport { numFixed } from '../../../common/utils';\n\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to create histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters\n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */\n\nfunction Histogram({\n  data, fields, id, binsCount = 10, filterData, filters, filterAdded, layout,\n}) {\n  const svgRef = useRef();\n  const [Scales] = useState({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const [histogram] = useState({\n    hist: d3.histogram(),\n    bins: null,\n  });\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 30,\n    left: 40,\n  };\n\n  // initialize svg and draw base histogram\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(svgRef.current).selectAll('svg').remove('svg');\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(svgRef.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n      Scales.x.domain([0, d3.max(data, (d) => d[fields.x])]).range([0, innerWidth]);\n\n      histogram.hist\n        .value((d) => d[fields.x])\n        .domain(Scales.x.domain())\n        .thresholds(Scales.x.ticks(binsCount));\n\n      histogram.bins = histogram.hist(data);\n\n      Scales.y = d3\n        .scaleLinear()\n        .range([innerHeight, 0])\n        .domain([0, d3.max(histogram.bins, (d) => d.length)]);\n\n      // brush\n      const brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on('end', () => {\n          if (d3.event.selection) {\n            const [x0, x1] = [d3.event.selection[0], d3.event.selection[1]];\n            filterAdded([\n              {\n                id,\n                field: fields.x,\n                operation: 'range',\n                values: [numFixed(Scales.x.invert(x0)), numFixed(Scales.x.invert(x1))],\n              },\n            ]);\n          }\n        });\n      svg.append('g').call(brush);\n\n      // draw x-axis\n      svg\n        .append('g')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(d3.axisBottom(Scales.x));\n\n      // draw y-axis\n      const view = svg\n        .append('g')\n        .call(d3.axisLeft(Scales.y))\n        .append('g')\n        .attr('class', 'hist-area');\n\n      // draw histogram rectangles\n      view\n        .selectAll('.bar')\n        .data(histogram.bins)\n        .join('rect')\n        .attr('class', 'bar')\n        .attr('x', 1)\n        .attr('transform', (d) => `translate(${Scales.x(d.x0)},${Scales.y(d.length)})`)\n        .attr('width', (d) => Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0))\n        .attr('height', (d) => innerHeight - Scales.y(d.length))\n        .style('fill', '#87CEFA');\n    }, 100);\n  }, [layout]);\n\n  // draw filtered histogram\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let { bins } = histogram;\n      if (filters.length !== 0) {\n        bins = histogram.hist(filterData);\n      }\n\n      d3.select(svgRef.current)\n        .selectAll('.hist-area')\n        .selectAll('.bar-f')\n        .data(bins)\n        .join('rect')\n        .attr('class', 'bar-f')\n        .style('transform', 'scale(1, -1)')\n        .attr('x', (d) => Scales.x(d.x0))\n        .attr('y', () => -innerHeight)\n        .transition()\n        .duration(1000)\n        .attr('width', (d) => Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0))\n        .attr('height', (d) => innerHeight - Scales.y(d.length))\n        .style('fill', '#4682B4');\n    }, 100);\n  }, [filters, filterData, layout]);\n  return <div id={id} ref={svgRef} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default Histogram;\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired }).isRequired,\n  id: PropTypes.string.isRequired,\n  binsCount: PropTypes.number,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nHistogram.defaultProps = {\n  binsCount: 10,\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","Object","defineProperty","value","configurable","get","$6950cc8086f38765$export$2e2bcd8739ae039","set","s","enumerable","$acw62","$9NlP8","$c9Z8w","$63tWu","$6950cc8086f38765$var$Histogram","data","fields","id","binsCount","filterData","filters","filterAdded","layout","svgRef","useRef","Scales","useState","x","scaleLinear","y","histogram","hist","bins","useEffect","setTimeout","select","current","selectAll","remove","rect","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","append","attr","domain","max","d","range","thresholds","ticks","length","brush","brushX","extent","on","event","selection","x0","x1","field","operation","values","numFixed","invert","call","axisBottom","view","axisLeft","join","Math","style","transition","duration","createElement","ref","role","propTypes","arrayOf","shape","isRequired","string","number","func","currentCols","defaultProps","React","d3","PropTypes","Histogram","margin","top","right","bottom","left"],"version":3,"file":"Histogram.e958a476.js.map"}