{"version":3,"sources":["components/VisualTools/Chart/BarChart.js"],"names":["_react","_interopRequireWildcard","require","d3","_propTypes","_interopRequireDefault","_tooltip","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","transform","data","field","nest","key","d","sortKeys","ascending","rollup","v","length","entries","wrap","text","width","each","word","currentText","select","words","split","reverse","line","lineNumber","y","attr","dy","parseFloat","tspan","append","concat","pop","push","join","node","getComputedTextLength","BarChart","props","margin","fields","fullData","x","self","useRef","scaleRef","hightRef","viewerRef","drawBar","selection","className","arguments","undefined","tooltipHandlers","createTooltip","current","value","updateBars","selectAll","enterBars","enter","bandwidth","on","mousemove","mouseleave","currentData","filter","id","title","operation","values","filterAdded","merge","transition","duration","exit","remove","useEffect","setTimeout","rect","getBoundingClientRect","innerWidth","innerHeight","height","svg","f","xScale","scaleBand","domain","map","range","padding","yScale","scaleLinear","max","createYScale","xAxis","axisBottom","yAxis","axisLeft","tickSize","layout","filters","filterData","createElement","ref","style","_default","exports","propTypes","PropTypes","arrayOf","shape","isRequired","string","func","number","currentCols"],"mappings":"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","file":"BarChart.174c5a63.js","sourceRoot":"../source","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport createTooltip from '../../partials/tooltip';\n\nconst transform = (data, field) => {\n  const newData = d3\n    .nest()\n    .key((d) => d[field])\n    .sortKeys(d3.ascending)\n    .rollup((v) => v.length)\n    .entries(data);\n  return newData;\n};\n\nconst wrap = (text, width) => {\n  text.each(function updateBars() {\n    const currentText = d3.select(this);\n    const words = currentText.text().split(/\\s+/).reverse();\n    let word;\n    let line = [];\n    let lineNumber = 0;\n    const lineHeight = 1.1; // ems\n    const y = currentText.attr('y');\n    const dy = parseFloat(currentText.attr('dy'));\n    let tspan = currentText\n      .text(null)\n      .append('tspan')\n      .attr('x', 0)\n      .attr('y', y)\n      .attr('dy', `${dy}em`);\n    word = words.pop();\n    while (word) {\n      line.push(word);\n      tspan.text(line.join(' '));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(' '));\n        line = [word];\n        tspan = currentText\n          .append('tspan')\n          .attr('x', 0)\n          .attr('y', y)\n          .attr('dy', `${++lineNumber * lineHeight + dy}em`)\n          .text(word);\n      }\n      word = words.pop();\n    }\n  });\n};\n\nfunction BarChart(props) {\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 35,\n    left: 35,\n  };\n\n  const fields = { x: 'key', y: 'value' };\n  const fullData = transform(props.data, props.fields.x);\n  const self = useRef();\n  const scaleRef = useRef();\n  const hightRef = useRef();\n  const viewerRef = useRef();\n\n  const createXScale = (f, width) => {\n    // set the ranges\n    const xScale = d3\n      .scaleBand()\n      .domain(fullData.map((d) => d[f]))\n      .range([0, width])\n      .padding(0.1);\n    return xScale;\n  };\n\n  const createYScale = (f, height) => {\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(fullData, (d) => d[f])])\n      .range([height, 0]);\n    return yScale;\n  };\n\n  const drawBar = (selection, data, className = 'og') => {\n    const addLabel = (d) => `${d.key}: ${d.value}`;\n    const offset = {\n      x: 60,\n      y: 0,\n    };\n    const tooltipHandlers = createTooltip(self.current, addLabel, offset);\n    const updateBars = selection.selectAll(`rect.${className}`).data(data, (d) => d[fields.x]);\n\n    const enterBars = updateBars.enter().append('rect');\n    enterBars\n      .attr('class', `${className}`)\n      .attr('x', (d) => scaleRef.current.x(d[fields.x]))\n      .attr('width', scaleRef.current.x.bandwidth())\n      .attr('y', hightRef.current);\n    enterBars\n      .on('mousemove', tooltipHandlers.mousemove)\n      .on('mouseleave', tooltipHandlers.mouseleave)\n      .on('click', (currentData) => {\n        const selected = enterBars.filter((d) => d === currentData);\n        const value = selected.data()[0].key;\n        const filter = {\n          id: props.id,\n          title: props.title,\n          field: props.fields.x,\n          operation: 'eq',\n          values: value,\n        };\n        props.filterAdded([filter]);\n      });\n\n    updateBars\n      .merge(enterBars)\n      .transition()\n      .duration(1000)\n      .attr('y', (d) => scaleRef.current.y(d[fields.y]))\n      .attr('height', (d) => hightRef.current - scaleRef.current.y(d[fields.y]));\n\n    // update_bars\n    updateBars\n      .exit()\n      .transition()\n      .duration(1000)\n      .attr('y', hightRef.current)\n      .attr('height', 0)\n      .remove();\n\n    return updateBars;\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(self.current).selectAll('svg').remove('svg');\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n      hightRef.current = innerHeight;\n\n      // create svg\n      const svg = d3\n        .select(self.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height);\n      // create viewer\n      viewerRef.current = svg\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n      const xScale = createXScale(fields.x, innerWidth);\n      const yScale = createYScale(fields.y, innerHeight);\n      scaleRef.current = { x: xScale, y: yScale };\n\n      const xAxis = d3.axisBottom(xScale);\n      viewerRef.current\n        .append('g')\n        .attr('class', 'x axis')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(xAxis)\n        .selectAll('.tick text')\n        .call(wrap, xScale.bandwidth());\n\n      // add the y Axis\n      const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth);\n      viewerRef.current.append('g').call(yAxis);\n\n      drawBar(viewerRef.current, fullData, 'og');\n    }, 100);\n  }, [props.layout]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      let data = [];\n      if (props.filters.length > 0) {\n        data = transform(props.filterData, props.fields.x);\n      } else {\n        data = fullData;\n      }\n      drawBar(viewerRef.current, data, 'ft');\n    }, 100);\n  }, [props.filters, props.filterData, props.layout]);\n\n  return <div id={props.id} ref={self} style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default BarChart;\n\nBarChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired }).isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n};\n"]}