{"mappings":"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","sources":["<anon>","source/components/VisualTools/Chart/BarChart.js","source/components/partials/tooltip.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lOjvX\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $fe0d67a98a125c5a$export$2e2bcd8739ae039);\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n\nvar $c9Z8w = parcelRequire(\"c9Z8w\");\n\nvar $bN8Lq = parcelRequire(\"bN8Lq\");\nconst $fe0d67a98a125c5a$var$transformList = (data, f)=>{\n    const map = new Map();\n    data.forEach((d)=>{\n        const items = d[f];\n        if (Array.isArray(items)) items.forEach((i)=>{\n            if (!map.has(i)) map.set(i, 0);\n            map.set(i, map.get(i) + 1);\n        });\n        else {\n            if (!map.has(items)) map.set(items, 0);\n            map.set(items, map.get(items) + 1);\n        }\n    });\n    return Array.from(map).map((d)=>({\n            key: d[0],\n            value: d[1]\n        }));\n};\nconst $fe0d67a98a125c5a$var$transform = (data, field, isList = false)=>{\n    if (isList) return $fe0d67a98a125c5a$var$transformList(data, field);\n    const collator = new Intl.Collator(undefined, {\n        numeric: true,\n        sensitivity: 'base'\n    });\n    function collSort(a, b) {\n        return collator.compare(a, b);\n    }\n    return $9NlP8.nest().key((d)=>d[field]).sortKeys(collSort).rollup((v)=>v.length).entries(data);\n};\nconst $fe0d67a98a125c5a$var$wrap = (text, width)=>{\n    text.each(function updateBars() {\n        const currentText = $9NlP8.select(this);\n        const words = currentText.text().split(/\\s+/).reverse();\n        let word;\n        let line = [];\n        let lineNumber = 0;\n        const lineHeight = 1.1; // ems\n        const y = currentText.attr('y');\n        const dy = parseFloat(currentText.attr('dy'));\n        let tspan = currentText.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', `${dy}em`);\n        word = words.pop();\n        while(word){\n            line.push(word);\n            tspan.text(line.join(' '));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n                line = [\n                    word\n                ];\n                tspan = currentText.append('tspan').attr('x', 0).attr('y', y).attr('dy', `${++lineNumber * lineHeight + dy}em`).text(word);\n            }\n            word = words.pop();\n        }\n    });\n};\nfunction $fe0d67a98a125c5a$var$BarChart(props) {\n    const margin = {\n        top: 10,\n        right: 10,\n        bottom: 35,\n        left: 35\n    };\n    const fields = {\n        x: 'key',\n        y: 'value'\n    };\n    const fullData = $fe0d67a98a125c5a$var$transform(props.data, props.fields.x, props.fields.isList);\n    const self = (0, $acw62.useRef)();\n    const scaleRef = (0, $acw62.useRef)();\n    const hightRef = (0, $acw62.useRef)();\n    const viewerRef = (0, $acw62.useRef)();\n    const createXScale = (f, width)=>{\n        // set the ranges\n        const xScale = $9NlP8.scaleBand().domain(fullData.map((d)=>d[f]).flat()).range([\n            0,\n            width\n        ]).padding(0.1);\n        return xScale;\n    };\n    const createYScale = (f, height)=>{\n        const yScale = $9NlP8.scaleLinear().domain([\n            0,\n            $9NlP8.max(fullData, (d)=>d[f])\n        ]).range([\n            height,\n            0\n        ]);\n        return yScale;\n    };\n    const drawBar = (selection, data, className = 'og')=>{\n        const addLabel = (d)=>`${d.key}: ${d.value}`;\n        const offset = {\n            x: 60,\n            y: 0\n        };\n        const tooltipHandlers = (0, $bN8Lq.default)(self.current, addLabel, offset);\n        const updateBars = selection.selectAll(`rect.${className}`).data(data, (d)=>d[fields.x]);\n        const enterBars = updateBars.enter().append('rect');\n        enterBars.attr('class', `${className}`).attr('x', (d)=>scaleRef.current.x(d[fields.x])).attr('width', scaleRef.current.x.bandwidth()).attr('y', hightRef.current).attr('role', 'graphics-symbol');\n        enterBars.on('mousemove', tooltipHandlers.mousemove).on('mouseleave', tooltipHandlers.mouseleave).on('click', (currentData)=>{\n            const selected = enterBars.filter((d)=>d === currentData);\n            const value = selected.data()[0].key;\n            const filter = props?.fields?.isList ? {\n                id: props.id,\n                title: props.title,\n                field: props.fields.x,\n                operation: 'has',\n                values: value\n            } : {\n                id: props.id,\n                title: props.title,\n                field: props.fields.x,\n                operation: 'eq',\n                values: value\n            };\n            props.filterAdded([\n                filter\n            ]);\n        });\n        updateBars.merge(enterBars).transition().duration(1000).attr('y', (d)=>scaleRef.current.y(d[fields.y])).attr('height', (d)=>hightRef.current - scaleRef.current.y(d[fields.y]));\n        // update_bars\n        updateBars.exit().transition().duration(1000).attr('y', hightRef.current).attr('height', 0).remove();\n        return updateBars;\n    };\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            $9NlP8.select(self.current).selectAll('svg').remove('svg');\n            const rect = self.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            hightRef.current = innerHeight;\n            // create svg\n            const svg = $9NlP8.select(self.current).append('svg').attr('width', rect.width).attr('height', rect.height).attr('role', 'img');\n            // create viewer\n            viewerRef.current = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n            const xScale = createXScale(fields.x, innerWidth);\n            const yScale = createYScale(fields.y, innerHeight);\n            scaleRef.current = {\n                x: xScale,\n                y: yScale\n            };\n            const xAxis = $9NlP8.axisBottom(xScale);\n            viewerRef.current.append('g').attr('class', 'x axis').attr('transform', `translate(0,${innerHeight})`).call(xAxis).selectAll('.tick text').call($fe0d67a98a125c5a$var$wrap, xScale.bandwidth());\n            // add the y Axis\n            const yAxis = $9NlP8.axisLeft(yScale).tickSize(-innerWidth);\n            viewerRef.current.append('g').call(yAxis);\n            drawBar(viewerRef.current, fullData, 'og');\n        }, 100);\n    }, [\n        props.layout\n    ]);\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            let data = [];\n            if (props.filters.length > 0) data = $fe0d67a98a125c5a$var$transform(props.filterData, props.fields.x, props.fields.isList);\n            else data = fullData;\n            drawBar(viewerRef.current, data, 'ft');\n        }, 100);\n    }, [\n        props.filters,\n        props.filterData,\n        props.layout\n    ]);\n    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($acw62))).createElement(\"div\", {\n        id: props.id,\n        ref: self,\n        role: \"figure\",\n        style: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n}\nvar $fe0d67a98a125c5a$export$2e2bcd8739ae039 = $fe0d67a98a125c5a$var$BarChart;\n$fe0d67a98a125c5a$var$BarChart.propTypes = {\n    data: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    fields: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        x: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n        isList: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).bool\n    }).isRequired,\n    id: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    title: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    filterData: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filters: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filterAdded: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).func.isRequired,\n    layout: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        width: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired,\n        currentCols: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired\n    }).isRequired\n};\n\n});\nparcelRegister(\"bN8Lq\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $895b11a613892f4e$export$2e2bcd8739ae039);\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n/**\n * @function createTooltip\n * @description creates a tooltip dev and mount it to\n * the chart\n * @param {*} mount reference to the chart to mount tooltip on\n * @param {Function} addLabel function to generate text inside tooltip\n * @param {Object} offset the x and y offset from mouse position to position tooltip\n * @returns {Object} contains to function mousemove and mouseleave handlers\n */ function $895b11a613892f4e$var$createTooltip(mount, addLabel, offset) {\n    const tooltip = $9NlP8.select(mount).append('div').style('opacity', 1).attr('class', 'tooltip').style('display', 'none').style('background-color', 'white').style('border', 'solid').style('border-width', '2px').style('border-radius', '5px').style('padding', '5px');\n    const mousemove = function move(d) {\n        tooltip.html(addLabel(d)).style('display', '').style('left', `${offset.x + $9NlP8.mouse(this)[0]}px`).style('top', `${offset.y + $9NlP8.mouse(this)[1]}px`);\n    };\n    const mouseleave = function leave() {\n        tooltip.style('display', 'none');\n    };\n    return {\n        mousemove: mousemove,\n        mouseleave: mouseleave\n    };\n}\nvar $895b11a613892f4e$export$2e2bcd8739ae039 = $895b11a613892f4e$var$createTooltip;\n\n});\n\n\n\n//# sourceMappingURL=BarChart.fee0c1cc.js.map\n","import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport createTooltip from '../../partials/tooltip';\n\nconst transformList = (data, f) => {\n  const map = new Map();\n  data.forEach((d) => {\n    const items = d[f];\n    if (Array.isArray(items)) {\n      items.forEach((i) => {\n        if (!map.has(i)) { map.set(i, 0); }\n        map.set(i, map.get(i) + 1);\n      });\n    } else {\n      if (!map.has(items)) { map.set(items, 0); }\n      map.set(items, map.get(items) + 1);\n    }\n  });\n  return Array.from(map).map((d) => ({ key: d[0], value: d[1] }));\n};\n\nconst transform = (data, field, isList = false) => {\n  if (isList) {\n    return transformList(data, field);\n  }\n  const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n  function collSort(a, b) {\n    return collator.compare(a, b);\n  }\n  return d3.nest().key((d) => d[field])\n    .sortKeys(collSort)\n    .rollup((v) => v.length)\n    .entries(data);\n};\n\nconst wrap = (text, width) => {\n  text.each(function updateBars() {\n    const currentText = d3.select(this);\n    const words = currentText.text().split(/\\s+/).reverse();\n    let word;\n    let line = [];\n    let lineNumber = 0;\n    const lineHeight = 1.1; // ems\n    const y = currentText.attr('y');\n    const dy = parseFloat(currentText.attr('dy'));\n    let tspan = currentText\n      .text(null)\n      .append('tspan')\n      .attr('x', 0)\n      .attr('y', y)\n      .attr('dy', `${dy}em`);\n    word = words.pop();\n    while (word) {\n      line.push(word);\n      tspan.text(line.join(' '));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(' '));\n        line = [word];\n        tspan = currentText\n          .append('tspan')\n          .attr('x', 0)\n          .attr('y', y)\n          .attr('dy', `${++lineNumber * lineHeight + dy}em`)\n          .text(word);\n      }\n      word = words.pop();\n    }\n  });\n};\n\nfunction BarChart(props) {\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 35,\n    left: 35,\n  };\n\n  const fields = { x: 'key', y: 'value' };\n  const fullData = transform(props.data, props.fields.x, props.fields.isList);\n  const self = useRef();\n  const scaleRef = useRef();\n  const hightRef = useRef();\n  const viewerRef = useRef();\n\n  const createXScale = (f, width) => {\n    // set the ranges\n    const xScale = d3\n      .scaleBand()\n      .domain(fullData.map((d) => d[f]).flat())\n      .range([0, width])\n      .padding(0.1);\n    return xScale;\n  };\n\n  const createYScale = (f, height) => {\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(fullData, (d) => d[f])])\n      .range([height, 0]);\n    return yScale;\n  };\n\n  const drawBar = (selection, data, className = 'og') => {\n    const addLabel = (d) => `${d.key}: ${d.value}`;\n    const offset = {\n      x: 60,\n      y: 0,\n    };\n    const tooltipHandlers = createTooltip(self.current, addLabel, offset);\n    const updateBars = selection.selectAll(`rect.${className}`).data(data, (d) => d[fields.x]);\n\n    const enterBars = updateBars.enter().append('rect');\n    enterBars\n      .attr('class', `${className}`)\n      .attr('x', (d) => scaleRef.current.x(d[fields.x]))\n      .attr('width', scaleRef.current.x.bandwidth())\n      .attr('y', hightRef.current)\n      .attr('role', 'graphics-symbol');\n    enterBars\n      .on('mousemove', tooltipHandlers.mousemove)\n      .on('mouseleave', tooltipHandlers.mouseleave)\n      .on('click', (currentData) => {\n        const selected = enterBars.filter((d) => d === currentData);\n        const value = selected.data()[0].key;\n        const filter = props?.fields?.isList ? {\n          id: props.id,\n          title: props.title,\n          field: props.fields.x,\n          operation: 'has',\n          values: value,\n        } : {\n          id: props.id,\n          title: props.title,\n          field: props.fields.x,\n          operation: 'eq',\n          values: value,\n        };\n        props.filterAdded([filter]);\n      });\n\n    updateBars\n      .merge(enterBars)\n      .transition()\n      .duration(1000)\n      .attr('y', (d) => scaleRef.current.y(d[fields.y]))\n      .attr('height', (d) => hightRef.current - scaleRef.current.y(d[fields.y]));\n\n    // update_bars\n    updateBars\n      .exit()\n      .transition()\n      .duration(1000)\n      .attr('y', hightRef.current)\n      .attr('height', 0)\n      .remove();\n\n    return updateBars;\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(self.current).selectAll('svg').remove('svg');\n      const rect = self.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n      hightRef.current = innerHeight;\n\n      // create svg\n      const svg = d3\n        .select(self.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .attr('role', 'img');\n      // create viewer\n      viewerRef.current = svg\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n      const xScale = createXScale(fields.x, innerWidth);\n      const yScale = createYScale(fields.y, innerHeight);\n      scaleRef.current = { x: xScale, y: yScale };\n\n      const xAxis = d3.axisBottom(xScale);\n      viewerRef.current\n        .append('g')\n        .attr('class', 'x axis')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(xAxis)\n        .selectAll('.tick text')\n        .call(wrap, xScale.bandwidth());\n\n      // add the y Axis\n      const yAxis = d3.axisLeft(yScale).tickSize(-innerWidth);\n      viewerRef.current.append('g').call(yAxis);\n\n      drawBar(viewerRef.current, fullData, 'og');\n    }, 100);\n  }, [props.layout]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      let data = [];\n      if (props.filters.length > 0) {\n        data = transform(props.filterData, props.fields.x, props.fields.isList);\n      } else {\n        data = fullData;\n      }\n      drawBar(viewerRef.current, data, 'ft');\n    }, 100);\n  }, [props.filters, props.filterData, props.layout]);\n\n  return <div id={props.id} ref={self} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default BarChart;\n\nBarChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired, isList: PropTypes.bool }).isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import * as d3 from 'd3';\n\n/**\n * @function createTooltip\n * @description creates a tooltip dev and mount it to\n * the chart\n * @param {*} mount reference to the chart to mount tooltip on\n * @param {Function} addLabel function to generate text inside tooltip\n * @param {Object} offset the x and y offset from mouse position to position tooltip\n * @returns {Object} contains to function mousemove and mouseleave handlers\n */\n\nfunction createTooltip(mount, addLabel, offset) {\n  const tooltip = d3\n    .select(mount)\n    .append('div')\n    .style('opacity', 1)\n    .attr('class', 'tooltip')\n    .style('display', 'none')\n    .style('background-color', 'white')\n    .style('border', 'solid')\n    .style('border-width', '2px')\n    .style('border-radius', '5px')\n    .style('padding', '5px');\n\n  const mousemove = function move(d) {\n    tooltip\n      .html(addLabel(d))\n      .style('display', '')\n      .style('left', `${offset.x + d3.mouse(this)[0]}px`)\n      .style('top', `${offset.y + d3.mouse(this)[1]}px`);\n  };\n\n  const mouseleave = function leave() {\n    tooltip.style('display', 'none');\n  };\n\n  return { mousemove, mouseleave };\n}\n\nexport default createTooltip;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","value","$fe0d67a98a125c5a$export$2e2bcd8739ae039","$acw62","$9NlP8","$c9Z8w","$bN8Lq","$fe0d67a98a125c5a$var$transformList","data","f","map","Map","forEach","d","items","Array","isArray","i","has","from","key","$fe0d67a98a125c5a$var$transform","field","isList","collator","Intl","Collator","undefined","numeric","sensitivity","nest","sortKeys","b","compare","rollup","length","entries","$fe0d67a98a125c5a$var$wrap","text","width","each","word","currentText","select","words","split","reverse","line","lineNumber","y","attr","dy","parseFloat","tspan","append","pop","push","join","node","getComputedTextLength","$fe0d67a98a125c5a$var$BarChart","props","fullData","fields","x","self","useRef","scaleRef","hightRef","viewerRef","createXScale","scaleBand","domain","flat","range","padding","createYScale","height","scaleLinear","max","drawBar","selection","className","tooltipHandlers","current","updateBars","selectAll","enterBars","enter","bandwidth","on","mousemove","mouseleave","currentData","selected","filter","id","title","operation","values","filterAdded","merge","transition","duration","exit","remove","useEffect","setTimeout","rect","getBoundingClientRect","innerWidth","innerHeight","svg","xScale","yScale","xAxis","axisBottom","call","yAxis","axisLeft","tickSize","layout","filters","filterData","createElement","ref","role","style","propTypes","arrayOf","shape","isRequired","string","bool","func","number","currentCols","$895b11a613892f4e$export$2e2bcd8739ae039","mount","addLabel","offset","tooltip","html","mouse","React","d3","PropTypes","createTooltip","transformList","transform","collSort","wrap","lineHeight","BarChart","margin","top","right","bottom","left","move","leave"],"version":3,"file":"BarChart.fee0c1cc.js.map"}