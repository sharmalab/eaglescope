{"version":3,"sources":["components/VisualTools/Chart/Histogram.js"],"names":["_react","_interopRequireWildcard","require","d3","_propTypes","_interopRequireDefault","_utils","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_arrayLikeToArray","toString","slice","constructor","name","Array","from","test","length","l","Symbol","iterator","f","o","next","done","push","value","return","isArray","Histogram","_ref","data","fields","id","_ref$binsCount","binsCount","filterData","filters","filterAdded","layout","svgRef","useRef","Scales","useState","x","scaleLinear","y","histogram","hist","bins","margin","useEffect","setTimeout","select","current","selectAll","remove","rect","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","append","attr","concat","domain","max","d","range","thresholds","ticks","brush","brushX","extent","on","event","selection","_ref2","x0","x1","field","operation","values","numFixed","invert","axisBottom","axisLeft","join","Math","style","transition","duration","createElement","ref","role","_default","exports","propTypes","PropTypes","arrayOf","shape","isRequired","string","number","func","currentCols","defaultProps"],"mappings":"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","file":"Histogram.97942e3b.js","sourceRoot":"../source","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport { numFixed } from '../../../common/utils';\n\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to create histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters\n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */\n\nfunction Histogram({\n  data, fields, id, binsCount = 10, filterData, filters, filterAdded, layout,\n}) {\n  const svgRef = useRef();\n  const [Scales] = useState({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const [histogram] = useState({\n    hist: d3.histogram(),\n    bins: null,\n  });\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 30,\n    left: 40,\n  };\n\n  // initialize svg and draw base histogram\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(svgRef.current).selectAll('svg').remove('svg');\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(svgRef.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n      Scales.x.domain([0, d3.max(data, (d) => d[fields.x])]).range([0, innerWidth]);\n\n      histogram.hist\n        .value((d) => d[fields.x])\n        .domain(Scales.x.domain())\n        .thresholds(Scales.x.ticks(binsCount));\n\n      histogram.bins = histogram.hist(data);\n\n      Scales.y = d3\n        .scaleLinear()\n        .range([innerHeight, 0])\n        .domain([0, d3.max(histogram.bins, (d) => d.length)]);\n\n      // brush\n      const brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on('end', () => {\n          if (d3.event.selection) {\n            const [x0, x1] = [d3.event.selection[0], d3.event.selection[1]];\n            filterAdded([\n              {\n                id,\n                field: fields.x,\n                operation: 'range',\n                values: [numFixed(Scales.x.invert(x0)), numFixed(Scales.x.invert(x1))],\n              },\n            ]);\n          }\n        });\n      svg.append('g').call(brush);\n\n      // draw x-axis\n      svg\n        .append('g')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(d3.axisBottom(Scales.x));\n\n      // draw y-axis\n      const view = svg\n        .append('g')\n        .call(d3.axisLeft(Scales.y))\n        .append('g')\n        .attr('class', 'hist-area');\n\n      // draw histogram rectangles\n      view\n        .selectAll('.bar')\n        .data(histogram.bins)\n        .join('rect')\n        .attr('class', 'bar')\n        .attr('x', 1)\n        .attr('transform', (d) => `translate(${Scales.x(d.x0)},${Scales.y(d.length)})`)\n        .attr('width', (d) => Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0))\n        .attr('height', (d) => innerHeight - Scales.y(d.length))\n        .style('fill', '#87CEFA');\n    }, 100);\n  }, [layout]);\n\n  // draw filtered histogram\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let { bins } = histogram;\n      if (filters.length !== 0) {\n        bins = histogram.hist(filterData);\n      }\n\n      d3.select(svgRef.current)\n        .selectAll('.hist-area')\n        .selectAll('.bar-f')\n        .data(bins)\n        .join('rect')\n        .attr('class', 'bar-f')\n        .style('transform', 'scale(1, -1)')\n        .attr('x', (d) => Scales.x(d.x0))\n        .attr('y', () => -innerHeight)\n        .transition()\n        .duration(1000)\n        .attr('width', (d) => Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0))\n        .attr('height', (d) => innerHeight - Scales.y(d.length))\n        .style('fill', '#4682B4');\n    }, 100);\n  }, [filters, filterData, layout]);\n  return <div id={id} ref={svgRef} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default Histogram;\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired }).isRequired,\n  id: PropTypes.string.isRequired,\n  binsCount: PropTypes.number,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nHistogram.defaultProps = {\n  binsCount: 10,\n};\n"]}