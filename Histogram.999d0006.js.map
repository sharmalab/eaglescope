{"mappings":"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","sources":["<anon>","source/components/VisualTools/Chart/Histogram.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"92AJR\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $6950cc8086f38765$export$2e2bcd8739ae039);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $9NlP8 = parcelRequire(\"9NlP8\");\n\nvar $c9Z8w = parcelRequire(\"c9Z8w\");\n\nvar $63tWu = parcelRequire(\"63tWu\");\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to create histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters\n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */ function $6950cc8086f38765$var$Histogram({ data: data, fields: fields, id: id, binsCount: binsCount = 10, filterData: filterData, filters: filters, filterAdded: filterAdded, layout: layout }) {\n    const svgRef = (0, $acw62.useRef)();\n    const [Scales] = (0, $acw62.useState)({\n        x: $9NlP8.scaleLinear(),\n        y: $9NlP8.scaleLinear()\n    });\n    const [histogram] = (0, $acw62.useState)({\n        hist: $9NlP8.histogram(),\n        bins: null\n    });\n    const margin = {\n        top: 10,\n        right: 10,\n        bottom: 30,\n        left: 40\n    };\n    // initialize svg and draw base histogram\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            $9NlP8.select(svgRef.current).selectAll('svg').remove('svg');\n            const rect = svgRef.current.getBoundingClientRect();\n            const innerWidth = rect.width - margin.left - margin.right;\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            const svg = $9NlP8.select(svgRef.current).append('svg').attr('width', rect.width).attr('height', rect.height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n            Scales.x.domain([\n                0,\n                $9NlP8.max(data, (d)=>d[fields.x])\n            ]).range([\n                0,\n                innerWidth\n            ]);\n            histogram.hist.value((d)=>d[fields.x]).domain(Scales.x.domain()).thresholds(Scales.x.ticks(binsCount));\n            histogram.bins = histogram.hist(data);\n            Scales.y = $9NlP8.scaleLinear().range([\n                innerHeight,\n                0\n            ]).domain([\n                0,\n                $9NlP8.max(histogram.bins, (d)=>d.length)\n            ]);\n            // brush\n            const brush = $9NlP8.brushX().extent([\n                [\n                    0,\n                    0\n                ],\n                [\n                    innerWidth,\n                    innerHeight\n                ]\n            ]).on('end', ()=>{\n                if ($9NlP8.event.selection) {\n                    const [x0, x1] = [\n                        $9NlP8.event.selection[0],\n                        $9NlP8.event.selection[1]\n                    ];\n                    filterAdded([\n                        {\n                            id: id,\n                            field: fields.x,\n                            operation: 'range',\n                            values: [\n                                (0, $63tWu.numFixed)(Scales.x.invert(x0)),\n                                (0, $63tWu.numFixed)(Scales.x.invert(x1))\n                            ]\n                        }\n                    ]);\n                }\n            });\n            svg.append('g').call(brush);\n            // draw x-axis\n            svg.append('g').attr('transform', `translate(0,${innerHeight})`).call($9NlP8.axisBottom(Scales.x));\n            // draw y-axis\n            const view = svg.append('g').call($9NlP8.axisLeft(Scales.y)).append('g').attr('class', 'hist-area');\n            // draw histogram rectangles\n            view.selectAll('.bar').data(histogram.bins).join('rect').attr('class', 'bar').attr('x', 1).attr('transform', (d)=>`translate(${Scales.x(d.x0)},${Scales.y(d.length)})`).attr('width', (d)=>Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0)).attr('height', (d)=>innerHeight - Scales.y(d.length)).style('fill', '#87CEFA');\n        }, 100);\n    }, [\n        layout\n    ]);\n    // draw filtered histogram\n    (0, $acw62.useEffect)(()=>{\n        setTimeout(()=>{\n            const rect = svgRef.current.getBoundingClientRect();\n            const innerHeight = rect.height - margin.top - margin.bottom;\n            let { bins: bins } = histogram;\n            if (filters.length !== 0) bins = histogram.hist(filterData);\n            $9NlP8.select(svgRef.current).selectAll('.hist-area').selectAll('.bar-f').data(bins).join('rect').attr('class', 'bar-f').style('transform', 'scale(1, -1)').attr('x', (d)=>Scales.x(d.x0)).attr('y', ()=>-innerHeight).transition().duration(1000).attr('width', (d)=>Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0)).attr('height', (d)=>innerHeight - Scales.y(d.length)).style('fill', '#4682B4');\n        }, 100);\n    }, [\n        filters,\n        filterData,\n        layout\n    ]);\n    return /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n        id: id,\n        ref: svgRef,\n        role: \"figure\",\n        style: {\n            width: '100%',\n            height: '100%'\n        }\n    });\n}\nvar $6950cc8086f38765$export$2e2bcd8739ae039 = $6950cc8086f38765$var$Histogram;\n$6950cc8086f38765$var$Histogram.propTypes = {\n    data: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    fields: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        x: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired\n    }).isRequired,\n    id: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).string.isRequired,\n    binsCount: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number,\n    filterData: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filters: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).arrayOf((0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({})).isRequired,\n    filterAdded: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).func.isRequired,\n    layout: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).shape({\n        width: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired,\n        currentCols: (0, (/*@__PURE__*/$parcel$interopDefault($c9Z8w))).number.isRequired\n    }).isRequired\n};\n$6950cc8086f38765$var$Histogram.defaultProps = {\n    binsCount: 10\n};\n\n});\n\n\n//# sourceMappingURL=Histogram.999d0006.js.map\n","import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport { numFixed } from '../../../common/utils';\n\n/**\n * @function Histogram\n * @description Creates an interactive histogram chart\n *              User can select specific range of x by brushing\n * @param {Object} data - total data without filtering\n * @param {Array} fields - contains filed to create histogram on\n * @param {String} id - HTML id for the chart\n * @param {Integer} binsCount - number of bins to split data on\n * @param {Object} filterData - data after applying filters\n * @param {Array} filters - current filters\n * @param {Function} filterAdded - handler for adding new filter\n * @returns {Component}\n */\n\nfunction Histogram({\n  data, fields, id, binsCount = 10, filterData, filters, filterAdded, layout,\n}) {\n  const svgRef = useRef();\n  const [Scales] = useState({\n    x: d3.scaleLinear(),\n    y: d3.scaleLinear(),\n  });\n  const [histogram] = useState({\n    hist: d3.histogram(),\n    bins: null,\n  });\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 30,\n    left: 40,\n  };\n\n  // initialize svg and draw base histogram\n  useEffect(() => {\n    setTimeout(() => {\n      d3.select(svgRef.current).selectAll('svg').remove('svg');\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerWidth = rect.width - margin.left - margin.right;\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(svgRef.current)\n        .append('svg')\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n      Scales.x.domain([0, d3.max(data, (d) => d[fields.x])]).range([0, innerWidth]);\n\n      histogram.hist\n        .value((d) => d[fields.x])\n        .domain(Scales.x.domain())\n        .thresholds(Scales.x.ticks(binsCount));\n\n      histogram.bins = histogram.hist(data);\n\n      Scales.y = d3\n        .scaleLinear()\n        .range([innerHeight, 0])\n        .domain([0, d3.max(histogram.bins, (d) => d.length)]);\n\n      // brush\n      const brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [innerWidth, innerHeight],\n        ])\n        .on('end', () => {\n          if (d3.event.selection) {\n            const [x0, x1] = [d3.event.selection[0], d3.event.selection[1]];\n            filterAdded([\n              {\n                id,\n                field: fields.x,\n                operation: 'range',\n                values: [numFixed(Scales.x.invert(x0)), numFixed(Scales.x.invert(x1))],\n              },\n            ]);\n          }\n        });\n      svg.append('g').call(brush);\n\n      // draw x-axis\n      svg\n        .append('g')\n        .attr('transform', `translate(0,${innerHeight})`)\n        .call(d3.axisBottom(Scales.x));\n\n      // draw y-axis\n      const view = svg\n        .append('g')\n        .call(d3.axisLeft(Scales.y))\n        .append('g')\n        .attr('class', 'hist-area');\n\n      // draw histogram rectangles\n      view\n        .selectAll('.bar')\n        .data(histogram.bins)\n        .join('rect')\n        .attr('class', 'bar')\n        .attr('x', 1)\n        .attr('transform', (d) => `translate(${Scales.x(d.x0)},${Scales.y(d.length)})`)\n        .attr('width', (d) => Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0))\n        .attr('height', (d) => innerHeight - Scales.y(d.length))\n        .style('fill', '#87CEFA');\n    }, 100);\n  }, [layout]);\n\n  // draw filtered histogram\n  useEffect(() => {\n    setTimeout(() => {\n      const rect = svgRef.current.getBoundingClientRect();\n      const innerHeight = rect.height - margin.top - margin.bottom;\n\n      let { bins } = histogram;\n      if (filters.length !== 0) {\n        bins = histogram.hist(filterData);\n      }\n\n      d3.select(svgRef.current)\n        .selectAll('.hist-area')\n        .selectAll('.bar-f')\n        .data(bins)\n        .join('rect')\n        .attr('class', 'bar-f')\n        .style('transform', 'scale(1, -1)')\n        .attr('x', (d) => Scales.x(d.x0))\n        .attr('y', () => -innerHeight)\n        .transition()\n        .duration(1000)\n        .attr('width', (d) => Math.max(Scales.x(d.x1) - Scales.x(d.x0) - 1, 0))\n        .attr('height', (d) => innerHeight - Scales.y(d.length))\n        .style('fill', '#4682B4');\n    }, 100);\n  }, [filters, filterData, layout]);\n  return <div id={id} ref={svgRef} role=\"figure\" style={{ width: '100%', height: '100%' }} />;\n}\n\nexport default Histogram;\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  fields: PropTypes.shape({ x: PropTypes.string.isRequired }).isRequired,\n  id: PropTypes.string.isRequired,\n  binsCount: PropTypes.number,\n  filterData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filters: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  filterAdded: PropTypes.func.isRequired,\n  layout: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    currentCols: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nHistogram.defaultProps = {\n  binsCount: 10,\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","Object","defineProperty","value","configurable","get","$6950cc8086f38765$export$2e2bcd8739ae039","set","s","enumerable","$ayMG0","$acw62","$9NlP8","$c9Z8w","$63tWu","$6950cc8086f38765$var$Histogram","data","fields","id","binsCount","filterData","filters","filterAdded","layout","svgRef","useRef","Scales","useState","x","scaleLinear","y","histogram","hist","bins","useEffect","setTimeout","select","current","selectAll","remove","rect","getBoundingClientRect","innerWidth","width","innerHeight","height","svg","append","attr","domain","max","d","range","thresholds","ticks","length","brush","brushX","extent","on","event","selection","x0","x1","field","operation","values","numFixed","invert","call","axisBottom","view","axisLeft","join","Math","style","transition","duration","jsx","ref","role","propTypes","arrayOf","shape","isRequired","string","number","func","currentCols","defaultProps"],"version":3,"file":"Histogram.999d0006.js.map"}